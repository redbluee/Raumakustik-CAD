{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to RoomAcousticWizard","text":"<p>This tool provides a user-friendly interface for calculating and optimizing reverberation times in rooms according to the DIN 18041 standard. It allows users to input room dimensions, surface materials, and other acoustic properties to obtain accurate reverberation time calculations.</p> <p>The tool can be found under this link: RoomAcousticWizard</p> <p></p> <p>Here is a brief overview of how to use the tool:</p> <ol> <li> <p>Input Room Parameters:     Enter the room parameters such as volume, temperature, humidity, and atmospheric pressure. These parameters are necessary for the reverberation time calculation. To compare the results to the requirements from DIN 18041, the room type according to the standard must be selected. It can be selected from the dropdown menu. Linked to the requirements is the optional room height parameter, which is needen when comparing the reverberation times with \"B\"-requirements from DIN 18041. Another optional parameter is a switch, selecting if the air damping should be considered in the calculation.</p> </li> <li> <p>Select Surface Materials:     In the Table below the diagram you can select the surfaces contributing to the room. They can be defined by their name, the area, the material name, and the absorption coefficients in the octaves between 63 Hz and 8000 Hz. If one absorption coefficient value is not known and the field is left empty, the reverberation time in this octave band won't be calculated. For the ease of use, materials and their absorption coefficients can be selected from an exemplary database based on DIN 18041 by clicking the database symbol next to the material selection field. This allows quick access to standardized material data without manual entry.</p> </li> <li> <p>Calculate Reverberation Time:     After entering all necessary parameters, the results will be displayed in the diagram. Visualized are the reverberation times in the octave bands between 63 Hz and 8000 Hz (if every parameter in each octave band is completely defined) and the requirements from DIN 18041 for the selected room type.</p> </li> </ol> <p>For further information about the used methods, please refer to the official norm DIN 18041:2016-03.</p>"},{"location":"api/","title":"Calculation backend","text":""},{"location":"api/#src.reverberation_calc","title":"<code>src.reverberation_calc</code>","text":""},{"location":"api/#src.reverberation_calc.DIN_18041_limits","title":"<code>DIN_18041_limits</code>","text":"<p>Defines a \"DIN_18041_limits\" object that calculates the limits for reverberation time according to DIN 18041 based on room type, volume, and height.</p> <p>Attributes:</p> Name Type Description <code>room</code> <code>room</code> <p>The room for which the limits are calculated, which is an instance of the room class.</p> <code>volume</code> <code>int or float</code> <p>The volume of the room in m\\(^3\\).</p> <code>c</code> <code>int or float</code> <p>The speed of sound in air in m/s, calculated based on the room's temperature and pressure.</p> <code>type</code> <code>str</code> <p>The type of room according to DIN 18041, specified as a string (e.g., \"A1\", \"B2\", or 'no requirements'). </p> <code>T_soll</code> <code>int or float</code> <p>The target reverberation time in s according to DIN 18041, calculated based on the room type, volume and height.</p> <code>T_upper_limit</code> <code>array</code> <p>The upper limit for reverberation time in s according to DIN 18041, calculated based on the target reverberation time.</p> <code>T_lower_limit</code> <code>array</code> <p>The lower limit for reverberation time in s according to DIN 18041, calculated based on the target reverberation time.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>class DIN_18041_limits:\n    \"\"\"\n    Defines a \"DIN_18041_limits\" object that calculates the limits for reverberation time according to DIN 18041 based on room type, volume, and height.\n\n    Attributes\n    ----------\n    room : room\n        The room for which the limits are calculated, which is an instance of the room class.\n    volume : int or float\n        The volume of the room in m$^3$.\n    c : int or float\n        The speed of sound in air in m/s, calculated based on the room's temperature and pressure.\n    type : str\n        The type of room according to DIN 18041, specified as a string (e.g., \"A1\", \"B2\", or 'no requirements'). \n    T_soll : int or float\n        The target reverberation time in s according to DIN 18041, calculated based on the room type, volume and height.\n    T_upper_limit : np.array\n        The upper limit for reverberation time in s according to DIN 18041, calculated based on the target reverberation time.\n    T_lower_limit : np.array\n        The lower limit for reverberation time in s according to DIN 18041, calculated based on the target reverberation time.\n\n    \"\"\"\n\n    def __init__(self, calc_room, type):\n        \"\"\"\n        Initializes a DIN_18041_limits object with a specified room and room type.\n\n        Parameters\n        ----------\n        calc_room : room\n            The room for which the limits are calculated, which is an instance of the room class.\n        type : str\n            The type of room according to DIN 18041, specified as a string (e.g., \"A1\", \"B2\", or 'no requirements'). \n\n        Raises\n        -------\n        TypeError\n            If the room is not an instance of the room class or if the type is not a string.\n        ValueError\n            If the type is not a valid room type according to DIN 18041.\n        \"\"\"\n        if not isinstance(calc_room, room):\n            raise TypeError(\"Room must be an instance of the room class.\")\n        if not isinstance(type, str):\n            raise TypeError(\"Type must be a string.\")\n        if len(type) != 2 or type[0] not in [\"A\", \"B\"] or type[1] not in [\"1\", \"2\", \"3\", \"4\", \"5\"]:\n            if type != \"no requirements\":\n                raise ValueError(\"Type must be a valid room type according to DIN 18041 (e.g., 'A1', 'B2') or 'no requirements'.\")\n        self.calc_room = calc_room\n        self.volume = self.calc_room.volume\n        self.c = self.calc_room.c\n        self.type = str(type)\n        self.get_limits()\n\n\n    def get_limits(self):\n        \"\"\"\n        Calculates the limits for reverberation time in s according to DIN 18041 based on room type, volume, and height.\n\n        Returns\n        -------\n        list of float\n            A list containing the upper and lower limits for reverberation time in s according to DIN 18041.\n        \"\"\"\n\n        # Get the limits Tsoll for reverberation time according to DIN 18041 based on room type, volume and height\n        self.T_soll = None\n        match self.type[0]:\n            case \"A\":\n                T_upper_limit_A = np.array((1.7,1.45,1.2,1.2,1.2,1.2,1.2,1.2))\n                T_lower_limit_A = np.array((0.5,0.65,0.8,0.8,0.8,0.8,0.65,0.5))\n\n                match self.type[1]:\n                    case \"1\":\n                        if self.volume &lt; 30:\n                            warnings.warn(\"According to DIN 18041, the room volume should be at least 30 m\u00b3 for type A1.\")\n                        if self.volume &gt; 1000:\n                            warnings.warn(\"According to DIN 18041, the room volume should be smaller than 1000 m\u00b3 for type A1.\")\n\n                        self.T_soll = 0.45*np.log10(self.volume) + 0.07\n\n                    case \"2\":\n                        if self.volume &lt; 50:\n                            warnings.warn(\"According to DIN 18041, the room volume should be at least 50 m\u00b3 for type A2.\")\n                        if self.volume &gt; 5000:\n                            warnings.warn(\"According to DIN 18041, the room volume should be smaller than 5000 m\u00b3 for type A2.\")\n\n                        self.T_soll = 0.37*np.log10(self.volume) + 0.14\n\n                    case \"3\":\n                        if self.volume &lt; 30:\n                            warnings.warn(\"According to DIN 18041, the room volume should be at least 30 m\u00b3 for type A3.\")\n                        if self.volume &gt; 5000:\n                            warnings.warn(\"According to DIN 18041, the room volume should be smaller than 5000 m\u00b3 for type A3.\")\n\n                        self.T_soll = 0.32*np.log10(self.volume) + 0.17\n\n                    case \"4\":\n                        if self.volume &lt; 30:\n                            warnings.warn(\"According to DIN 18041, the room volume should be at least 30 m\u00b3 for type A4.\")\n                        if self.volume &gt; 500:\n                            warnings.warn(\"According to DIN 18041, the room volume should be smaller than 500 m\u00b3 for type A4.\")\n\n                        self.T_soll = 0.26*np.log10(self.volume) + 0.14\n\n                    case \"5\":\n                        if self.volume &lt; 200:\n                            warnings.warn(\"According to DIN 18041, the room volume should be at least 200 m\u00b3 for type A5.\")\n                        if self.volume &gt; 9999:\n                            self.T_soll = 2\n\n                        self.T_soll = 0.75*np.log10(self.volume) + 1\n\n                self.T_upper_limit = T_upper_limit_A*self.T_soll\n                self.T_lower_limit = T_lower_limit_A*self.T_soll\n\n            case \"B\":\n                T_upper_limit_B = np.array((0,0,1,1,1,1,0,0))\n                T_lower_limit_B = np.array((0,0,0,0,0,0,0,0))\n\n                match self.type[1]:\n                    case \"1\":\n                        warnings.warn(\"According to DIN 18041, there are no requirements for type B1.\")\n                        self.T_soll = 0\n                    case \"2\":\n                        if self.calc_room.height &lt;= 2.5:\n                            A_V = 0.15\n                        if self.calc_room.height &gt; 2.5:\n                            A_V = 1/(4.8 + 4.69 * np.log10(self.calc_room.height))\n\n                    case \"3\":\n                        if self.calc_room.height &lt;= 2.5:\n                            A_V = 0.20\n                        if self.calc_room.height &gt; 2.5:\n                            A_V = 1/(3.13 + 4.69 * np.log10(self.calc_room.height))\n\n                    case \"4\":\n                        if self.calc_room.height &lt;= 2.5:\n                            A_V = 0.25\n                        if self.calc_room.height &gt; 2.5:\n                            A_V = 1/(2.13 + 4.69 * np.log10(self.calc_room.height))\n\n                    case \"5\":\n                        if self.calc_room.height &lt;= 2.5:\n                            A_V = 0.30\n                        if self.calc_room.height &gt; 2.5:\n                            A_V = 1/(1.47 + 4.69 * np.log10(self.calc_room.height))\n\n                if self.T_soll == 0:\n                    self.T_soll = 0\n                else:\n                    self.T_soll = (55.3/self.c) * (self.volume / (A_V * self.volume))\n\n                self.T_upper_limit = T_upper_limit_B * self.T_soll\n                self.T_lower_limit = T_lower_limit_B\n\n            case _:\n                raise ValueError(\"Invalid room type specified.\")\n\n\n        match self.type:\n            case \"no requirements\":\n                self.T_soll = np.nan\n                self.T_upper_limit = np.array([np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan])\n                self.T_lower_limit = np.array([np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan])\n\n        return (self.T_upper_limit, self.T_lower_limit)\n</code></pre>"},{"location":"api/#src.reverberation_calc.DIN_18041_limits.__init__","title":"<code>__init__(calc_room, type)</code>","text":"<p>Initializes a DIN_18041_limits object with a specified room and room type.</p> <p>Parameters:</p> Name Type Description Default <code>calc_room</code> <code>room</code> <p>The room for which the limits are calculated, which is an instance of the room class.</p> required <code>type</code> <code>str</code> <p>The type of room according to DIN 18041, specified as a string (e.g., \"A1\", \"B2\", or 'no requirements').</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the room is not an instance of the room class or if the type is not a string.</p> <code>ValueError</code> <p>If the type is not a valid room type according to DIN 18041.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def __init__(self, calc_room, type):\n    \"\"\"\n    Initializes a DIN_18041_limits object with a specified room and room type.\n\n    Parameters\n    ----------\n    calc_room : room\n        The room for which the limits are calculated, which is an instance of the room class.\n    type : str\n        The type of room according to DIN 18041, specified as a string (e.g., \"A1\", \"B2\", or 'no requirements'). \n\n    Raises\n    -------\n    TypeError\n        If the room is not an instance of the room class or if the type is not a string.\n    ValueError\n        If the type is not a valid room type according to DIN 18041.\n    \"\"\"\n    if not isinstance(calc_room, room):\n        raise TypeError(\"Room must be an instance of the room class.\")\n    if not isinstance(type, str):\n        raise TypeError(\"Type must be a string.\")\n    if len(type) != 2 or type[0] not in [\"A\", \"B\"] or type[1] not in [\"1\", \"2\", \"3\", \"4\", \"5\"]:\n        if type != \"no requirements\":\n            raise ValueError(\"Type must be a valid room type according to DIN 18041 (e.g., 'A1', 'B2') or 'no requirements'.\")\n    self.calc_room = calc_room\n    self.volume = self.calc_room.volume\n    self.c = self.calc_room.c\n    self.type = str(type)\n    self.get_limits()\n</code></pre>"},{"location":"api/#src.reverberation_calc.DIN_18041_limits.get_limits","title":"<code>get_limits()</code>","text":"<p>Calculates the limits for reverberation time in s according to DIN 18041 based on room type, volume, and height.</p> <p>Returns:</p> Type Description <code>list of float</code> <p>A list containing the upper and lower limits for reverberation time in s according to DIN 18041.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_limits(self):\n    \"\"\"\n    Calculates the limits for reverberation time in s according to DIN 18041 based on room type, volume, and height.\n\n    Returns\n    -------\n    list of float\n        A list containing the upper and lower limits for reverberation time in s according to DIN 18041.\n    \"\"\"\n\n    # Get the limits Tsoll for reverberation time according to DIN 18041 based on room type, volume and height\n    self.T_soll = None\n    match self.type[0]:\n        case \"A\":\n            T_upper_limit_A = np.array((1.7,1.45,1.2,1.2,1.2,1.2,1.2,1.2))\n            T_lower_limit_A = np.array((0.5,0.65,0.8,0.8,0.8,0.8,0.65,0.5))\n\n            match self.type[1]:\n                case \"1\":\n                    if self.volume &lt; 30:\n                        warnings.warn(\"According to DIN 18041, the room volume should be at least 30 m\u00b3 for type A1.\")\n                    if self.volume &gt; 1000:\n                        warnings.warn(\"According to DIN 18041, the room volume should be smaller than 1000 m\u00b3 for type A1.\")\n\n                    self.T_soll = 0.45*np.log10(self.volume) + 0.07\n\n                case \"2\":\n                    if self.volume &lt; 50:\n                        warnings.warn(\"According to DIN 18041, the room volume should be at least 50 m\u00b3 for type A2.\")\n                    if self.volume &gt; 5000:\n                        warnings.warn(\"According to DIN 18041, the room volume should be smaller than 5000 m\u00b3 for type A2.\")\n\n                    self.T_soll = 0.37*np.log10(self.volume) + 0.14\n\n                case \"3\":\n                    if self.volume &lt; 30:\n                        warnings.warn(\"According to DIN 18041, the room volume should be at least 30 m\u00b3 for type A3.\")\n                    if self.volume &gt; 5000:\n                        warnings.warn(\"According to DIN 18041, the room volume should be smaller than 5000 m\u00b3 for type A3.\")\n\n                    self.T_soll = 0.32*np.log10(self.volume) + 0.17\n\n                case \"4\":\n                    if self.volume &lt; 30:\n                        warnings.warn(\"According to DIN 18041, the room volume should be at least 30 m\u00b3 for type A4.\")\n                    if self.volume &gt; 500:\n                        warnings.warn(\"According to DIN 18041, the room volume should be smaller than 500 m\u00b3 for type A4.\")\n\n                    self.T_soll = 0.26*np.log10(self.volume) + 0.14\n\n                case \"5\":\n                    if self.volume &lt; 200:\n                        warnings.warn(\"According to DIN 18041, the room volume should be at least 200 m\u00b3 for type A5.\")\n                    if self.volume &gt; 9999:\n                        self.T_soll = 2\n\n                    self.T_soll = 0.75*np.log10(self.volume) + 1\n\n            self.T_upper_limit = T_upper_limit_A*self.T_soll\n            self.T_lower_limit = T_lower_limit_A*self.T_soll\n\n        case \"B\":\n            T_upper_limit_B = np.array((0,0,1,1,1,1,0,0))\n            T_lower_limit_B = np.array((0,0,0,0,0,0,0,0))\n\n            match self.type[1]:\n                case \"1\":\n                    warnings.warn(\"According to DIN 18041, there are no requirements for type B1.\")\n                    self.T_soll = 0\n                case \"2\":\n                    if self.calc_room.height &lt;= 2.5:\n                        A_V = 0.15\n                    if self.calc_room.height &gt; 2.5:\n                        A_V = 1/(4.8 + 4.69 * np.log10(self.calc_room.height))\n\n                case \"3\":\n                    if self.calc_room.height &lt;= 2.5:\n                        A_V = 0.20\n                    if self.calc_room.height &gt; 2.5:\n                        A_V = 1/(3.13 + 4.69 * np.log10(self.calc_room.height))\n\n                case \"4\":\n                    if self.calc_room.height &lt;= 2.5:\n                        A_V = 0.25\n                    if self.calc_room.height &gt; 2.5:\n                        A_V = 1/(2.13 + 4.69 * np.log10(self.calc_room.height))\n\n                case \"5\":\n                    if self.calc_room.height &lt;= 2.5:\n                        A_V = 0.30\n                    if self.calc_room.height &gt; 2.5:\n                        A_V = 1/(1.47 + 4.69 * np.log10(self.calc_room.height))\n\n            if self.T_soll == 0:\n                self.T_soll = 0\n            else:\n                self.T_soll = (55.3/self.c) * (self.volume / (A_V * self.volume))\n\n            self.T_upper_limit = T_upper_limit_B * self.T_soll\n            self.T_lower_limit = T_lower_limit_B\n\n        case _:\n            raise ValueError(\"Invalid room type specified.\")\n\n\n    match self.type:\n        case \"no requirements\":\n            self.T_soll = np.nan\n            self.T_upper_limit = np.array([np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan])\n            self.T_lower_limit = np.array([np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan, np.nan])\n\n    return (self.T_upper_limit, self.T_lower_limit)\n</code></pre>"},{"location":"api/#src.reverberation_calc.air_damp","title":"<code>air_damp</code>","text":"<p>Defines an \"air_damp\" object that calculates the sound absorption coefficient \\(m\\) in 1/m of air based on frequency, temperature, humidity, and pressure according to DIN EN ISO 354, based on \\(alpha\\) from ISO 9613-1.</p> <p>Parameters:</p> Name Type Description Default <code>frequency</code> <code>list</code> <p>A list of frequencies in Hz for which the sound absorption coefficient is calculated.</p> required <p>Attributes:</p> Name Type Description <code>pressure</code> <code>(int or float, optional)</code> <p>The pressure in kPa (default is 101.325 kPa).</p> <code>ref_pressure</code> <code>(int or float, optional)</code> <p>The reference pressure in kPa (default is 101.325 kPa).</p> <code>rel_humidity</code> <code>(int or float, optional)</code> <p>The relative humidity in % (default is 50 %).</p> <code>abs_humidity</code> <code>(int or float, optional)</code> <p>The absolute humidity as molar concentration of water vapour in air in % according to ISO 9613-1 Annex B.</p> <code>temperature</code> <code>(int or float, optional)</code> <p>The temperature in Celsius (default is 20\u00b0C).</p> <code>ref_temperature</code> <code>(int or float, optional)</code> <p>The reference temperature in Kelvin (default is 293.15 \u00b0K, which is 20 \u00b0C).</p> <code>alpha</code> <code>list</code> <p>A list of sound absorption coefficients in dB/m, calculated based on the frequency, temperature, humidity and pressure.</p> <code>m</code> <code>list</code> <p>A list of sound absorption coefficients in 1/m, calculated from alpha.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>class air_damp:\n    \"\"\"\n    Defines an \"air_damp\" object that calculates the sound absorption coefficient $m$ in 1/m of air based on frequency, temperature, humidity, and pressure according to DIN EN ISO 354, based on $alpha$ from ISO 9613-1.\n\n    Parameters\n    ----------\n    frequency : list\n        A list of frequencies in Hz for which the sound absorption coefficient is calculated.\n\n    Attributes\n    ----------\n    pressure : int or float, optional\n        The pressure in kPa (default is 101.325 kPa).\n    ref_pressure : int or float, optional\n        The reference pressure in kPa (default is 101.325 kPa).\n    rel_humidity : int or float, optional\n        The relative humidity in % (default is 50 %).\n    abs_humidity : int or float, optional\n        The absolute humidity as molar concentration of water vapour in air in % according to ISO 9613-1 Annex B.\n    temperature : int or float, optional\n        The temperature in Celsius (default is 20\u00b0C).\n    ref_temperature : int or float, optional\n        The reference temperature in Kelvin (default is 293.15 \u00b0K, which is 20 \u00b0C).\n    alpha : list\n        A list of sound absorption coefficients in dB/m, calculated based on the frequency, temperature, humidity and pressure.\n    m : list\n        A list of sound absorption coefficients in 1/m, calculated from alpha.\n    \"\"\"\n\n    def __init__(self, frequency):\n        \"\"\"\n        Initializes an air_damp object with a specified frequency and default values for pressure, relative humidity, temperature, and reference temperature.\n\n        Parameters\n        ----------\n        frequency : list of int or float\n            A list of frequencies in Hz for which the sound absorption coefficient is calculated.\n\n        Raises\n        -------\n        TypeError\n            If the frequency is not a list.\n        ValueError\n            If the frequency is not a list or if it contains non-numeric values.\n        ValueError\n            If the frequency list is empty.\n        ValueError\n            If the frequency list contains negative values.\n        \"\"\"\n        if not isinstance(frequency, list):\n            raise TypeError(\"Frequency must be a list.\")\n        if not all(isinstance(f, (int, float)) for f in frequency):\n            raise ValueError(\"Frequency must be a list of numeric values.\")\n        if len(frequency) == 0:\n            raise ValueError(\"Frequency list cannot be empty.\")\n        if any(f &lt; 0 for f in frequency):\n            raise ValueError(\"Frequency values must be non-negative.\")\n\n        self.frequency = frequency\n        self.pressure = 101.325\n        self.ref_pressure = 101.325\n        self.rel_humidity = 50          # percentage\n        self.temperature = 20           # Celsius\n        self.ref_temperature = 293.15   # Kelvin\n        self.calculate_abs_humidity()\n        self.coefficient = self.calculate_coefficient()\n\n    def set_frequency(self, frequency):\n        \"\"\"\n        Sets the frequency in Hz for which the sound absorption coefficient is calculated.\n\n        Parameters\n        ----------\n        frequency : list of int or float\n            A list of frequencies in Hz.\n\n        Raises\n        -------\n        TypeError\n            If the frequency is not a list.\n        ValueError\n            If the frequency is not a list or if it contains non-numeric values.\n        ValueError\n            If the frequency list is empty.\n        ValueError\n            If the frequency list contains negative values.\n        \"\"\"\n        if not isinstance(frequency, list):\n            raise TypeError(\"Frequency must be a list.\")\n        if not all(isinstance(f, (int, float)) for f in frequency):\n            raise ValueError(\"Frequency must be a list of numeric values.\")\n        if len(frequency) == 0:\n            raise ValueError(\"Frequency list cannot be empty.\")\n        if any(f &lt; 0 for f in frequency):\n            raise ValueError(\"Frequency values must be non-negative.\")\n\n        self.frequency = frequency    \n\n    def set_pressure(self, pressure):\n        \"\"\"\n        Sets the pressure in kPa for the sound absorption coefficient calculation.\n\n        Parameters\n        ----------\n        pressure : int or float\n            The pressure in kPa.\n\n        Raises\n        -------\n        TypeError\n            If the pressure is not a numeric value.\n        ValueError\n            If the pressure is not a positive numeric value.\n        \"\"\"\n        if not isinstance(pressure, (int, float)):\n            raise TypeError(\"Pressure must be an integer or float.\")\n        if pressure &lt;= 0:\n            raise ValueError(\"Pressure must be a positive value.\")\n        self.pressure = pressure\n\n    def set_temperature(self, temperature):\n        \"\"\"\n        Sets the temperature in Celsius for the sound absorption coefficient calculation.\n\n        Parameters\n        ----------\n        temperature : int or float\n            The temperature in \u00b0C.\n\n        Raises\n        -------\n        TypeError\n            If the temperature is not a numeric value.\n        ValueError\n            If the temperature is not above absolute zero (-273.15 \u00b0C).\n        \"\"\"\n        if not isinstance(temperature, (int, float)):\n            raise TypeError(\"Temperature must be an integer or float.\")\n        if temperature &lt; -273.15:\n            raise ValueError(\"Temperature must be above absolute zero (-273.15 \u00b0C).\")\n        self.temperature = temperature + 273.15\n\n    def get_temperature(self):\n        \"\"\"\n        Returns the temperature in \u00b0C.\n\n        Returns\n        -------\n        float\n            The temperature in \u00b0C.\n        \"\"\"\n        return self.temperature - 273.15\n\n    def set_rel_humidity(self, rel_humidity):\n        \"\"\"\n        Sets the relative humidity in % for the sound absorption coefficient calculation.\n\n        Parameters\n        ----------\n        rel_humidity : int or float\n            The relative humidity in %.\n\n        Raises\n        -------\n        TypeError\n            If the relative humidity is not an integer or float.\n        ValueError\n            If the relative humidity is not in the range of 0 % - 100 %.\n        \"\"\"\n        if not isinstance(rel_humidity, (int, float)):\n            raise TypeError(\"Relative humidity must be an integer or float.\")  \n        if rel_humidity &lt; 0 or rel_humidity &gt; 100:\n            raise ValueError(\"Relative humidity must be between 0 and 100 %.\")\n        self.rel_humidity = rel_humidity\n        self.calculate_abs_humidity()\n\n    def calculate_abs_humidity(self):\n        \"\"\"\n        Calculates the absolute humidity based on the relative humidity, pressure, and temperature.\n        The absolute humidity is calculated as the molar concentration of water vapor in air according to ISO 9613-1 Annex B.\n        \"\"\"\n        self.abs_humidity = (self.rel_humidity * 10**(-6.8346 * ((273.16 / (self.temperature))**1.261) + 4.6151)) / (self.pressure / 101.325)\n\n    def set_ref_pressure(self, ref_pressure):\n        \"\"\"\n        Sets the reference pressure in kPa for the sound absorption coefficient calculation.\n\n        Parameters\n        ----------\n        ref_pressure : int or float\n            The reference pressure in kPa.\n\n        Raises\n        -------\n        TypeError\n            If the reference pressure is not a numeric value.\n        ValueError\n            If the reference pressure is not a positive numeric value.\n        \"\"\"\n        if not isinstance(ref_pressure, (int, float)):\n            raise TypeError(\"Reference pressure must be an integer or float.\")\n        if ref_pressure &lt;= 0:\n            raise ValueError(\"Reference pressure must be a positive value.\")\n        self.ref_pressure = ref_pressure\n\n    def calculate_coefficient(self):\n        \"\"\"\n        Calculates the sound absorption coefficient $m$ in 1/m and $alpha$ in dB/m of air based on frequency, temperature, humidity and pressure according to DIN EN ISO 354, based on $alpha$ from ISO 9613-1.\n\n        Returns\n        -------\n        list\n            The sound absorption coefficient $m$ in 1/m.\n\n        Raises\n        -------\n        ValueError\n            If temperature, relative humidity or pressure is not set before calculating the coefficient.\n        \"\"\"\n        if not hasattr(self, 'temperature'):\n            raise ValueError(\"Temperature must be set before calculating coefficient.\") \n        if not hasattr(self, 'rel_humidity'):\n            raise ValueError(\"Relative humidity must be set before calculating coefficient.\")\n        if not hasattr(self, 'pressure'):\n            raise ValueError(\"Pressure must be set before calculating coefficient.\")\n        else:\n            alpha = np.zeros(len(self.frequency))\n            f_rO = (self.pressure/self.ref_pressure)*(24.0+4.04*(10.0**4.0)*self.abs_humidity*((0.02+self.abs_humidity)/(0.391+self.abs_humidity)))\n            f_rN = (self.pressure/self.ref_pressure)*((self.temperature/self.ref_temperature)**(-(1.0/2.0)))*(9.0+280.0*self.abs_humidity*np.exp(-4.170*(((self.temperature/self.ref_temperature)**(-(1.0/3.0)))-1.0)))\n            for i, f in enumerate(self.frequency):\n                alpha[i] = 8.686*(f**2.0)*((1.84*(10.0**(-11.0))*((self.pressure/self.ref_pressure)**(-1.0))*((self.temperature/self.ref_temperature)**(1.0/2.0)))+\n                                 ((self.temperature/self.ref_temperature)**(-5.0/2.0))*\n                                 (0.01275*np.exp(-2239.1/self.temperature)*((f_rO+((f**2.0)/f_rO))**(-1.0))+\n                                  0.1068*np.exp(-3352.0/self.temperature)*((f_rN+((f**2.0)/f_rN))**(-1.0))))# dB/m\n\n            m = (alpha*1000)/4350\n            self.alpha = alpha\n            self.m = m\n            return m\n</code></pre>"},{"location":"api/#src.reverberation_calc.air_damp.__init__","title":"<code>__init__(frequency)</code>","text":"<p>Initializes an air_damp object with a specified frequency and default values for pressure, relative humidity, temperature, and reference temperature.</p> <p>Parameters:</p> Name Type Description Default <code>frequency</code> <code>list of int or float</code> <p>A list of frequencies in Hz for which the sound absorption coefficient is calculated.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the frequency is not a list.</p> <code>ValueError</code> <p>If the frequency is not a list or if it contains non-numeric values.</p> <code>ValueError</code> <p>If the frequency list is empty.</p> <code>ValueError</code> <p>If the frequency list contains negative values.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def __init__(self, frequency):\n    \"\"\"\n    Initializes an air_damp object with a specified frequency and default values for pressure, relative humidity, temperature, and reference temperature.\n\n    Parameters\n    ----------\n    frequency : list of int or float\n        A list of frequencies in Hz for which the sound absorption coefficient is calculated.\n\n    Raises\n    -------\n    TypeError\n        If the frequency is not a list.\n    ValueError\n        If the frequency is not a list or if it contains non-numeric values.\n    ValueError\n        If the frequency list is empty.\n    ValueError\n        If the frequency list contains negative values.\n    \"\"\"\n    if not isinstance(frequency, list):\n        raise TypeError(\"Frequency must be a list.\")\n    if not all(isinstance(f, (int, float)) for f in frequency):\n        raise ValueError(\"Frequency must be a list of numeric values.\")\n    if len(frequency) == 0:\n        raise ValueError(\"Frequency list cannot be empty.\")\n    if any(f &lt; 0 for f in frequency):\n        raise ValueError(\"Frequency values must be non-negative.\")\n\n    self.frequency = frequency\n    self.pressure = 101.325\n    self.ref_pressure = 101.325\n    self.rel_humidity = 50          # percentage\n    self.temperature = 20           # Celsius\n    self.ref_temperature = 293.15   # Kelvin\n    self.calculate_abs_humidity()\n    self.coefficient = self.calculate_coefficient()\n</code></pre>"},{"location":"api/#src.reverberation_calc.air_damp.calculate_abs_humidity","title":"<code>calculate_abs_humidity()</code>","text":"<p>Calculates the absolute humidity based on the relative humidity, pressure, and temperature. The absolute humidity is calculated as the molar concentration of water vapor in air according to ISO 9613-1 Annex B.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def calculate_abs_humidity(self):\n    \"\"\"\n    Calculates the absolute humidity based on the relative humidity, pressure, and temperature.\n    The absolute humidity is calculated as the molar concentration of water vapor in air according to ISO 9613-1 Annex B.\n    \"\"\"\n    self.abs_humidity = (self.rel_humidity * 10**(-6.8346 * ((273.16 / (self.temperature))**1.261) + 4.6151)) / (self.pressure / 101.325)\n</code></pre>"},{"location":"api/#src.reverberation_calc.air_damp.calculate_coefficient","title":"<code>calculate_coefficient()</code>","text":"<p>Calculates the sound absorption coefficient \\(m\\) in 1/m and \\(alpha\\) in dB/m of air based on frequency, temperature, humidity and pressure according to DIN EN ISO 354, based on \\(alpha\\) from ISO 9613-1.</p> <p>Returns:</p> Type Description <code>list</code> <p>The sound absorption coefficient \\(m\\) in 1/m.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If temperature, relative humidity or pressure is not set before calculating the coefficient.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def calculate_coefficient(self):\n    \"\"\"\n    Calculates the sound absorption coefficient $m$ in 1/m and $alpha$ in dB/m of air based on frequency, temperature, humidity and pressure according to DIN EN ISO 354, based on $alpha$ from ISO 9613-1.\n\n    Returns\n    -------\n    list\n        The sound absorption coefficient $m$ in 1/m.\n\n    Raises\n    -------\n    ValueError\n        If temperature, relative humidity or pressure is not set before calculating the coefficient.\n    \"\"\"\n    if not hasattr(self, 'temperature'):\n        raise ValueError(\"Temperature must be set before calculating coefficient.\") \n    if not hasattr(self, 'rel_humidity'):\n        raise ValueError(\"Relative humidity must be set before calculating coefficient.\")\n    if not hasattr(self, 'pressure'):\n        raise ValueError(\"Pressure must be set before calculating coefficient.\")\n    else:\n        alpha = np.zeros(len(self.frequency))\n        f_rO = (self.pressure/self.ref_pressure)*(24.0+4.04*(10.0**4.0)*self.abs_humidity*((0.02+self.abs_humidity)/(0.391+self.abs_humidity)))\n        f_rN = (self.pressure/self.ref_pressure)*((self.temperature/self.ref_temperature)**(-(1.0/2.0)))*(9.0+280.0*self.abs_humidity*np.exp(-4.170*(((self.temperature/self.ref_temperature)**(-(1.0/3.0)))-1.0)))\n        for i, f in enumerate(self.frequency):\n            alpha[i] = 8.686*(f**2.0)*((1.84*(10.0**(-11.0))*((self.pressure/self.ref_pressure)**(-1.0))*((self.temperature/self.ref_temperature)**(1.0/2.0)))+\n                             ((self.temperature/self.ref_temperature)**(-5.0/2.0))*\n                             (0.01275*np.exp(-2239.1/self.temperature)*((f_rO+((f**2.0)/f_rO))**(-1.0))+\n                              0.1068*np.exp(-3352.0/self.temperature)*((f_rN+((f**2.0)/f_rN))**(-1.0))))# dB/m\n\n        m = (alpha*1000)/4350\n        self.alpha = alpha\n        self.m = m\n        return m\n</code></pre>"},{"location":"api/#src.reverberation_calc.air_damp.get_temperature","title":"<code>get_temperature()</code>","text":"<p>Returns the temperature in \u00b0C.</p> <p>Returns:</p> Type Description <code>float</code> <p>The temperature in \u00b0C.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_temperature(self):\n    \"\"\"\n    Returns the temperature in \u00b0C.\n\n    Returns\n    -------\n    float\n        The temperature in \u00b0C.\n    \"\"\"\n    return self.temperature - 273.15\n</code></pre>"},{"location":"api/#src.reverberation_calc.air_damp.set_frequency","title":"<code>set_frequency(frequency)</code>","text":"<p>Sets the frequency in Hz for which the sound absorption coefficient is calculated.</p> <p>Parameters:</p> Name Type Description Default <code>frequency</code> <code>list of int or float</code> <p>A list of frequencies in Hz.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the frequency is not a list.</p> <code>ValueError</code> <p>If the frequency is not a list or if it contains non-numeric values.</p> <code>ValueError</code> <p>If the frequency list is empty.</p> <code>ValueError</code> <p>If the frequency list contains negative values.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_frequency(self, frequency):\n    \"\"\"\n    Sets the frequency in Hz for which the sound absorption coefficient is calculated.\n\n    Parameters\n    ----------\n    frequency : list of int or float\n        A list of frequencies in Hz.\n\n    Raises\n    -------\n    TypeError\n        If the frequency is not a list.\n    ValueError\n        If the frequency is not a list or if it contains non-numeric values.\n    ValueError\n        If the frequency list is empty.\n    ValueError\n        If the frequency list contains negative values.\n    \"\"\"\n    if not isinstance(frequency, list):\n        raise TypeError(\"Frequency must be a list.\")\n    if not all(isinstance(f, (int, float)) for f in frequency):\n        raise ValueError(\"Frequency must be a list of numeric values.\")\n    if len(frequency) == 0:\n        raise ValueError(\"Frequency list cannot be empty.\")\n    if any(f &lt; 0 for f in frequency):\n        raise ValueError(\"Frequency values must be non-negative.\")\n\n    self.frequency = frequency    \n</code></pre>"},{"location":"api/#src.reverberation_calc.air_damp.set_pressure","title":"<code>set_pressure(pressure)</code>","text":"<p>Sets the pressure in kPa for the sound absorption coefficient calculation.</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>int or float</code> <p>The pressure in kPa.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the pressure is not a numeric value.</p> <code>ValueError</code> <p>If the pressure is not a positive numeric value.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_pressure(self, pressure):\n    \"\"\"\n    Sets the pressure in kPa for the sound absorption coefficient calculation.\n\n    Parameters\n    ----------\n    pressure : int or float\n        The pressure in kPa.\n\n    Raises\n    -------\n    TypeError\n        If the pressure is not a numeric value.\n    ValueError\n        If the pressure is not a positive numeric value.\n    \"\"\"\n    if not isinstance(pressure, (int, float)):\n        raise TypeError(\"Pressure must be an integer or float.\")\n    if pressure &lt;= 0:\n        raise ValueError(\"Pressure must be a positive value.\")\n    self.pressure = pressure\n</code></pre>"},{"location":"api/#src.reverberation_calc.air_damp.set_ref_pressure","title":"<code>set_ref_pressure(ref_pressure)</code>","text":"<p>Sets the reference pressure in kPa for the sound absorption coefficient calculation.</p> <p>Parameters:</p> Name Type Description Default <code>ref_pressure</code> <code>int or float</code> <p>The reference pressure in kPa.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the reference pressure is not a numeric value.</p> <code>ValueError</code> <p>If the reference pressure is not a positive numeric value.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_ref_pressure(self, ref_pressure):\n    \"\"\"\n    Sets the reference pressure in kPa for the sound absorption coefficient calculation.\n\n    Parameters\n    ----------\n    ref_pressure : int or float\n        The reference pressure in kPa.\n\n    Raises\n    -------\n    TypeError\n        If the reference pressure is not a numeric value.\n    ValueError\n        If the reference pressure is not a positive numeric value.\n    \"\"\"\n    if not isinstance(ref_pressure, (int, float)):\n        raise TypeError(\"Reference pressure must be an integer or float.\")\n    if ref_pressure &lt;= 0:\n        raise ValueError(\"Reference pressure must be a positive value.\")\n    self.ref_pressure = ref_pressure\n</code></pre>"},{"location":"api/#src.reverberation_calc.air_damp.set_rel_humidity","title":"<code>set_rel_humidity(rel_humidity)</code>","text":"<p>Sets the relative humidity in % for the sound absorption coefficient calculation.</p> <p>Parameters:</p> Name Type Description Default <code>rel_humidity</code> <code>int or float</code> <p>The relative humidity in %.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the relative humidity is not an integer or float.</p> <code>ValueError</code> <p>If the relative humidity is not in the range of 0 % - 100 %.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_rel_humidity(self, rel_humidity):\n    \"\"\"\n    Sets the relative humidity in % for the sound absorption coefficient calculation.\n\n    Parameters\n    ----------\n    rel_humidity : int or float\n        The relative humidity in %.\n\n    Raises\n    -------\n    TypeError\n        If the relative humidity is not an integer or float.\n    ValueError\n        If the relative humidity is not in the range of 0 % - 100 %.\n    \"\"\"\n    if not isinstance(rel_humidity, (int, float)):\n        raise TypeError(\"Relative humidity must be an integer or float.\")  \n    if rel_humidity &lt; 0 or rel_humidity &gt; 100:\n        raise ValueError(\"Relative humidity must be between 0 and 100 %.\")\n    self.rel_humidity = rel_humidity\n    self.calculate_abs_humidity()\n</code></pre>"},{"location":"api/#src.reverberation_calc.air_damp.set_temperature","title":"<code>set_temperature(temperature)</code>","text":"<p>Sets the temperature in Celsius for the sound absorption coefficient calculation.</p> <p>Parameters:</p> Name Type Description Default <code>temperature</code> <code>int or float</code> <p>The temperature in \u00b0C.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the temperature is not a numeric value.</p> <code>ValueError</code> <p>If the temperature is not above absolute zero (-273.15 \u00b0C).</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_temperature(self, temperature):\n    \"\"\"\n    Sets the temperature in Celsius for the sound absorption coefficient calculation.\n\n    Parameters\n    ----------\n    temperature : int or float\n        The temperature in \u00b0C.\n\n    Raises\n    -------\n    TypeError\n        If the temperature is not a numeric value.\n    ValueError\n        If the temperature is not above absolute zero (-273.15 \u00b0C).\n    \"\"\"\n    if not isinstance(temperature, (int, float)):\n        raise TypeError(\"Temperature must be an integer or float.\")\n    if temperature &lt; -273.15:\n        raise ValueError(\"Temperature must be above absolute zero (-273.15 \u00b0C).\")\n    self.temperature = temperature + 273.15\n</code></pre>"},{"location":"api/#src.reverberation_calc.material","title":"<code>material</code>","text":"<p>Defines a \"material\" object with properties such as name, absorption coefficient (and price).</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the material.</p> <code>absorption_coefficient</code> <code>list</code> <p>The absorption coefficient of the material at different frequencies.</p> <code>price</code> <code>(int or float, optional)</code> <p>The price of the material as \u20ac/m\\(^2\\) (default is None).</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>class material:\n    \"\"\"\n    Defines a \"material\" object with properties such as name, absorption coefficient (and price).\n\n    Attributes\n    ----------\n    name : str\n        The name of the material.\n    absorption_coefficient : list\n        The absorption coefficient of the material at different frequencies.\n    price : int or float, optional\n        The price of the material as \u20ac/m$^2$ (default is None).\n    \"\"\"\n\n    def __init__(self, name, absorption_coefficient):\n        \"\"\"\n        Initializes a material object with a specified name and absorption coefficient.\n\n        Parameters\n        ----------\n        name : str\n            The name of the material.\n        absorption_coefficient : list of float\n            A list of absorption coefficients at different frequencies.\n\n        Raises\n        -------\n        TypeError\n            If the name is not a string or if the absorption coefficient is not a list.\n        ValueError\n            If the absorption coefficient is not a list or if it contains non-numeric values.\n        ValueError\n            If the absorption coefficient list is empty.\n        ValueError\n            If the absorption coefficient list contains negative values.\n        ValueError\n            If the absorption coefficient list does not contain exactly 8 values for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Name must be a string.\")\n        if not isinstance(absorption_coefficient, list):\n            raise TypeError(\"Absorption coefficient must be a list.\")\n        if not all(isinstance(ac, (int, float)) for ac in absorption_coefficient):\n            raise ValueError(\"Absorption coefficient must be a list of numeric values.\")\n        if len(absorption_coefficient) == 0:\n            raise ValueError(\"Absorption coefficient list cannot be empty.\")\n        if any(ac &lt; 0 for ac in absorption_coefficient):\n            raise ValueError(\"Absorption coefficient values must be non-negative.\")\n        if len(absorption_coefficient) != 8:\n            raise ValueError(\"Absorption coefficient list must contain exactly 8 values for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\")\n        self.name = name\n        self.absorption_coefficient = np.array(absorption_coefficient)\n        # self.frequency_weight = self.get_frequency_weight()\n        self.price = None\n\n    def set_absorption_coefficient(self, absorption_coefficient):\n        \"\"\"\n        Sets the absorption coefficient of the material.\n\n        Parameters\n        ----------\n        absorption_coefficient : list of float\n            A list of absorption coefficients at different frequencies.\n\n        Raises\n        -------\n        TypeError\n            If the absorption coefficient is not a list.\n        ValueError\n            If the absorption coefficient is not a list or if it contains non-numeric values.\n        ValueError\n            If the absorption coefficient list is empty.\n        ValueError\n            If the absorption coefficient list contains negative values.\n        ValueError\n            If the absorption coefficient list does not contain exactly 8 values for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\n        \"\"\"\n        if not isinstance(absorption_coefficient, list):\n            raise TypeError(\"Absorption coefficient must be a list.\")\n        if not all(isinstance(ac, (int, float)) for ac in absorption_coefficient):\n            raise ValueError(\"Absorption coefficient must be a list of numeric values.\")\n        if len(absorption_coefficient) == 0:\n            raise ValueError(\"Absorption coefficient list cannot be empty.\")\n        if any(ac &lt; 0 for ac in absorption_coefficient):\n            raise ValueError(\"Absorption coefficient values must be non-negative.\")\n        if len(absorption_coefficient) != 8:\n            raise ValueError(\"Absorption coefficient list must contain exactly 8 values for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\")\n        self.absorption_coefficient = absorption_coefficient\n\n    def get_absorption_coefficient(self):\n        \"\"\"\n        Returns the absorption coefficient of the material.\n\n        Returns\n        -------\n        list\n            The absorption coefficient of the material at different frequencies.\n        \"\"\"\n        return self.absorption_coefficient\n\n    def set_name(self, name):\n        \"\"\"\n        Sets the name of the material.\n\n        Parameters\n        ----------\n        name : str\n            The name of the material.\n\n        Raises\n        -------\n        TypeError\n            If the name is not a string.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Name must be a string.\")\n        self.name = name\n\n    def get_name(self):\n        \"\"\"\n        Returns the name of the material.\n\n        Returns\n        -------\n        str\n            The name of the material if it has been set, otherwise returns None.\n        \"\"\"\n        if not hasattr(self, 'name'):\n            return None\n        return self.name\n\n    def set_price(self, price):\n        \"\"\"\n        Sets the price of the material.\n\n        Parameters\n        ----------\n        price : int or float\n            The price of the material in \u20ac/m$^2$.\n\n        Raises\n        -------\n        TypeError\n            If the price is not a numeric value.\n        ValueError\n            If the price is not a positive numeric value.\n        \"\"\"\n        if not isinstance(price, (int, float)):\n            raise TypeError(\"Price must be an integer or float.\")\n        if price &lt; 0:\n            raise ValueError(\"Price must be a non-negative value.\")\n        self.price = price\n\n    def get_price(self):\n        \"\"\"\n        Returns the price of the material in \u20ac/m$^2$ if it has been set.\n\n        Returns\n        -------\n        float or None\n            The price of the material in \u20ac/m$^2$ if it has been set, otherwise returns None.\n        \"\"\"\n        return self.price if hasattr(self, 'price') else None\n</code></pre>"},{"location":"api/#src.reverberation_calc.material.__init__","title":"<code>__init__(name, absorption_coefficient)</code>","text":"<p>Initializes a material object with a specified name and absorption coefficient.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the material.</p> required <code>absorption_coefficient</code> <code>list of float</code> <p>A list of absorption coefficients at different frequencies.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the name is not a string or if the absorption coefficient is not a list.</p> <code>ValueError</code> <p>If the absorption coefficient is not a list or if it contains non-numeric values.</p> <code>ValueError</code> <p>If the absorption coefficient list is empty.</p> <code>ValueError</code> <p>If the absorption coefficient list contains negative values.</p> <code>ValueError</code> <p>If the absorption coefficient list does not contain exactly 8 values for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def __init__(self, name, absorption_coefficient):\n    \"\"\"\n    Initializes a material object with a specified name and absorption coefficient.\n\n    Parameters\n    ----------\n    name : str\n        The name of the material.\n    absorption_coefficient : list of float\n        A list of absorption coefficients at different frequencies.\n\n    Raises\n    -------\n    TypeError\n        If the name is not a string or if the absorption coefficient is not a list.\n    ValueError\n        If the absorption coefficient is not a list or if it contains non-numeric values.\n    ValueError\n        If the absorption coefficient list is empty.\n    ValueError\n        If the absorption coefficient list contains negative values.\n    ValueError\n        If the absorption coefficient list does not contain exactly 8 values for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\n    \"\"\"\n    if not isinstance(name, str):\n        raise TypeError(\"Name must be a string.\")\n    if not isinstance(absorption_coefficient, list):\n        raise TypeError(\"Absorption coefficient must be a list.\")\n    if not all(isinstance(ac, (int, float)) for ac in absorption_coefficient):\n        raise ValueError(\"Absorption coefficient must be a list of numeric values.\")\n    if len(absorption_coefficient) == 0:\n        raise ValueError(\"Absorption coefficient list cannot be empty.\")\n    if any(ac &lt; 0 for ac in absorption_coefficient):\n        raise ValueError(\"Absorption coefficient values must be non-negative.\")\n    if len(absorption_coefficient) != 8:\n        raise ValueError(\"Absorption coefficient list must contain exactly 8 values for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\")\n    self.name = name\n    self.absorption_coefficient = np.array(absorption_coefficient)\n    # self.frequency_weight = self.get_frequency_weight()\n    self.price = None\n</code></pre>"},{"location":"api/#src.reverberation_calc.material.get_absorption_coefficient","title":"<code>get_absorption_coefficient()</code>","text":"<p>Returns the absorption coefficient of the material.</p> <p>Returns:</p> Type Description <code>list</code> <p>The absorption coefficient of the material at different frequencies.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_absorption_coefficient(self):\n    \"\"\"\n    Returns the absorption coefficient of the material.\n\n    Returns\n    -------\n    list\n        The absorption coefficient of the material at different frequencies.\n    \"\"\"\n    return self.absorption_coefficient\n</code></pre>"},{"location":"api/#src.reverberation_calc.material.get_name","title":"<code>get_name()</code>","text":"<p>Returns the name of the material.</p> <p>Returns:</p> Type Description <code>str</code> <p>The name of the material if it has been set, otherwise returns None.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_name(self):\n    \"\"\"\n    Returns the name of the material.\n\n    Returns\n    -------\n    str\n        The name of the material if it has been set, otherwise returns None.\n    \"\"\"\n    if not hasattr(self, 'name'):\n        return None\n    return self.name\n</code></pre>"},{"location":"api/#src.reverberation_calc.material.get_price","title":"<code>get_price()</code>","text":"<p>Returns the price of the material in \u20ac/m\\(^2\\) if it has been set.</p> <p>Returns:</p> Type Description <code>float or None</code> <p>The price of the material in \u20ac/m\\(^2\\) if it has been set, otherwise returns None.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_price(self):\n    \"\"\"\n    Returns the price of the material in \u20ac/m$^2$ if it has been set.\n\n    Returns\n    -------\n    float or None\n        The price of the material in \u20ac/m$^2$ if it has been set, otherwise returns None.\n    \"\"\"\n    return self.price if hasattr(self, 'price') else None\n</code></pre>"},{"location":"api/#src.reverberation_calc.material.set_absorption_coefficient","title":"<code>set_absorption_coefficient(absorption_coefficient)</code>","text":"<p>Sets the absorption coefficient of the material.</p> <p>Parameters:</p> Name Type Description Default <code>absorption_coefficient</code> <code>list of float</code> <p>A list of absorption coefficients at different frequencies.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the absorption coefficient is not a list.</p> <code>ValueError</code> <p>If the absorption coefficient is not a list or if it contains non-numeric values.</p> <code>ValueError</code> <p>If the absorption coefficient list is empty.</p> <code>ValueError</code> <p>If the absorption coefficient list contains negative values.</p> <code>ValueError</code> <p>If the absorption coefficient list does not contain exactly 8 values for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_absorption_coefficient(self, absorption_coefficient):\n    \"\"\"\n    Sets the absorption coefficient of the material.\n\n    Parameters\n    ----------\n    absorption_coefficient : list of float\n        A list of absorption coefficients at different frequencies.\n\n    Raises\n    -------\n    TypeError\n        If the absorption coefficient is not a list.\n    ValueError\n        If the absorption coefficient is not a list or if it contains non-numeric values.\n    ValueError\n        If the absorption coefficient list is empty.\n    ValueError\n        If the absorption coefficient list contains negative values.\n    ValueError\n        If the absorption coefficient list does not contain exactly 8 values for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\n    \"\"\"\n    if not isinstance(absorption_coefficient, list):\n        raise TypeError(\"Absorption coefficient must be a list.\")\n    if not all(isinstance(ac, (int, float)) for ac in absorption_coefficient):\n        raise ValueError(\"Absorption coefficient must be a list of numeric values.\")\n    if len(absorption_coefficient) == 0:\n        raise ValueError(\"Absorption coefficient list cannot be empty.\")\n    if any(ac &lt; 0 for ac in absorption_coefficient):\n        raise ValueError(\"Absorption coefficient values must be non-negative.\")\n    if len(absorption_coefficient) != 8:\n        raise ValueError(\"Absorption coefficient list must contain exactly 8 values for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\")\n    self.absorption_coefficient = absorption_coefficient\n</code></pre>"},{"location":"api/#src.reverberation_calc.material.set_name","title":"<code>set_name(name)</code>","text":"<p>Sets the name of the material.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the material.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the name is not a string.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_name(self, name):\n    \"\"\"\n    Sets the name of the material.\n\n    Parameters\n    ----------\n    name : str\n        The name of the material.\n\n    Raises\n    -------\n    TypeError\n        If the name is not a string.\n    \"\"\"\n    if not isinstance(name, str):\n        raise TypeError(\"Name must be a string.\")\n    self.name = name\n</code></pre>"},{"location":"api/#src.reverberation_calc.material.set_price","title":"<code>set_price(price)</code>","text":"<p>Sets the price of the material.</p> <p>Parameters:</p> Name Type Description Default <code>price</code> <code>int or float</code> <p>The price of the material in \u20ac/m\\(^2\\).</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the price is not a numeric value.</p> <code>ValueError</code> <p>If the price is not a positive numeric value.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_price(self, price):\n    \"\"\"\n    Sets the price of the material.\n\n    Parameters\n    ----------\n    price : int or float\n        The price of the material in \u20ac/m$^2$.\n\n    Raises\n    -------\n    TypeError\n        If the price is not a numeric value.\n    ValueError\n        If the price is not a positive numeric value.\n    \"\"\"\n    if not isinstance(price, (int, float)):\n        raise TypeError(\"Price must be an integer or float.\")\n    if price &lt; 0:\n        raise ValueError(\"Price must be a non-negative value.\")\n    self.price = price\n</code></pre>"},{"location":"api/#src.reverberation_calc.reverberation_time","title":"<code>reverberation_time</code>","text":"<p>Defines a \"reverberation_time\" object that calculates the reverberation time of a room based on the extended Sabine formula from DIN EN ISO 354.</p> <p>Attributes:</p> Name Type Description <code>calc_room</code> <code>room</code> <p>The room for which the reverberation time is calculated, which is an instance of the room class.</p> <code>surfaces</code> <code>list</code> <p>A list of surfaces in the room, each of which is an instance of the surface class.</p> <code>frequency_bands</code> <code>list</code> <p>A list of frequency bands in Hz for which the reverberation time is calculated.</p> <code>air_damp_calc</code> <code>(bool, optional)</code> <p>A flag indicating whether air damping is considered in the calculation (default is True).</p> <code>Aeq</code> <code>int or float</code> <p>The equivalent sound absorption area of the room in m\\(^2\\), calculated based on the surfaces and their materials.</p> <code>c</code> <code>int or float</code> <p>The speed of sound in air in m/s, calculated based on the room's temperature and pressure.</p> <code>volume</code> <code>int or float</code> <p>The volume of the room in m\\(^3\\).</p> <code>air_damp</code> <code>air_damp</code> <p>An instance of the air_damp class that calculates the sound absorption coefficient of air based on frequency, temperature, humidity, and pressure.</p> <code>reverberation_time</code> <code>list</code> <p>The calculated reverberation time of the room in s.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>class reverberation_time:\n    \"\"\"\n    Defines a \"reverberation_time\" object that calculates the reverberation time of a room based on the extended Sabine formula from DIN EN ISO 354.\n\n    Attributes\n    ----------\n    calc_room : room\n        The room for which the reverberation time is calculated, which is an instance of the room class.\n    surfaces : list\n        A list of surfaces in the room, each of which is an instance of the surface class.\n    frequency_bands : list\n        A list of frequency bands in Hz for which the reverberation time is calculated.\n    air_damp_calc : bool, optional\n        A flag indicating whether air damping is considered in the calculation (default is True).\n    Aeq : int or float\n        The equivalent sound absorption area of the room in m$^2$, calculated based on the surfaces and their materials.\n    c : int or float\n        The speed of sound in air in m/s, calculated based on the room's temperature and pressure.\n    volume : int or float\n        The volume of the room in m$^3$.\n    air_damp : air_damp\n        An instance of the air_damp class that calculates the sound absorption coefficient of air based on frequency, temperature, humidity, and pressure.\n    reverberation_time : list\n        The calculated reverberation time of the room in s.\n    \"\"\"\n\n    def __init__(self, calc_room, surfaces, air_damp_calc=True, meas_reverberation_time=None):\n        \"\"\"\n        Initializes a reverberation_time object with a specified room, surfaces, and optional parameters for air damping calculation and measured reverberation time.\n\n        Parameters\n        ----------\n        calc_room : room\n            The room for which the reverberation time is calculated, which is an instance of the room class.\n        surfaces : list of surface\n            A list of surfaces in the room, each of which is an instance of the surface class.\n        air_damp_calc : bool, optional\n            A flag indicating whether air damping is considered in the calculation (default is True).\n        meas_reverberation_time : list of int or float, optional\n            A list of measured reverberation times of the room in s (default is None).\n\n        Raises\n        -------\n        ValueError\n            If the room is not an instance of the room class.\n        TypeError\n            If the surfaces are not a list or if any surface is not an instance of the surface class.\n        ValueError\n            If the surfaces list is empty.\n        TypeError\n            If the air_damp_calc is not a boolean.\n        TypeError\n            If the measured reverberation time is not a list or if it contains non-numeric values.\n        ValueError\n            If the measured reverberation time list does not contain exactly 8 entries for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\n        ValueError\n            If the measured reverberation time list is empty or if it contains negative values.\n        \"\"\"\n        if not isinstance(calc_room, room):\n            raise TypeError(\"Room must be an instance of the room class.\")\n        if not isinstance(surfaces, list):\n            raise TypeError(\"Surfaces must be a list.\")\n        if not all(isinstance(calc_surface, surface) for calc_surface in surfaces):\n            raise TypeError(\"All surfaces must be instances of the surface class.\")\n        if len(surfaces) == 0:\n            raise ValueError(\"Surfaces list cannot be empty.\")\n        if not isinstance(air_damp_calc, bool):\n            raise TypeError(\"Air damping calculation flag must be a boolean.\")\n        if meas_reverberation_time is not None:\n            if not isinstance(meas_reverberation_time, list):\n                raise TypeError(\"Measured reverberation time must be a list.\")\n            if not all(isinstance(mrt, (int, float)) for mrt in meas_reverberation_time):\n                raise ValueError(\"Measured reverberation time must be a list of numeric values.\")\n            if len(meas_reverberation_time) != 8:\n                raise ValueError(\"Measured reverberation time must be a list containing 8 entries for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\")\n            if len(meas_reverberation_time) == 0:\n                raise ValueError(\"Measured reverberation time list cannot be empty.\")\n            if any(mrt &lt; 0 for mrt in meas_reverberation_time):\n                raise ValueError(\"Measured reverberation time values must be non-negative.\")\n\n\n        self.calc_room = calc_room\n        self.frequency_bands = [63, 125, 250, 500, 1000, 2000, 4000, 8000]\n        self.surfaces = surfaces\n        self.calculate_Aeq()\n        self.c = calc_room.get_c()\n        #self.materials = surfaces.materials\n        self.volume = calc_room.volume\n        self.air_damp_calc = air_damp_calc\n        self.air_damp = air_damp(self.frequency_bands)\n        self.air_damp.set_temperature(calc_room.get_temperature())\n        self.air_damp.set_pressure(calc_room.get_pressure())\n        self.air_damp.set_rel_humidity(calc_room.get_rel_humidity())\n        if meas_reverberation_time is not None:\n            self.meas_reverberation_time = np.array(meas_reverberation_time)\n        else:\n            self.meas_reverberation_time = None\n        self.calculate_reverberation_time()\n\n    def calculate_Aeq(self):\n        \"\"\"\n        Calculates the equivalent sound absorption area (Aeq) in m$^2$ of the room based on the surfaces and their materials.\n        The equivalent sound absorption area is calculated as the sum of the product of the absorption coefficient and the area of each surface.\n\n        Returns\n        -------\n        float\n            The equivalent sound absorption area of the room in m$^2$.\n\n        Raises\n        -------\n        ValueError\n            If any surface does not have a material with an absorption coefficient defined.\n        \"\"\"\n        if not all(hasattr(surface, 'get_material') and surface.get_material() is not None for surface in self.surfaces):\n            raise ValueError(\"All surfaces must have a material with an absorption coefficient defined.\")\n        coeffs = np.array([surface.get_material().get_absorption_coefficient() for surface in self.surfaces])\n        areas = np.array([surface.get_area() for surface in self.surfaces])\n        Aeq_octave = coeffs * areas[:, np.newaxis]\n        Aeq = np.nansum(Aeq_octave, axis=0)\n        nan_mask = np.isnan(Aeq_octave).any(axis=0)\n        Aeq[nan_mask] = np.nan\n        self.Aeq = Aeq\n        return self.Aeq\n\n    def calculate_reverberation_time(self):\n        r\"\"\"\n        Calculates the reverberation time of the room based on the extended Sabine formula, considering air damping if specified.\n\n        The reverberation time is calculated using the formula:\n\n        $$T = \\frac{55.3 \\cdot V}{A_{eq} \\cdot c}$$\n\n        where:\n\n        - $T$ is the reverberation time in s\n        - $V$ is the volume of the room in m\u00b3\n        - $A_{eq}$ is the equivalent sound absorption area in m\u00b2\n        - $c$ is the speed of sound in air in m/s\n\n        If air damping is considered, the formula is corrected by the speed of sound and air damping:\n\n        $$T = \\frac{55.3}{c} \\cdot \\frac{V}{A_{eq} + 4 \\cdot V \\cdot m}$$\n\n        where $m$ is the sound absorption coefficient of air in 1/m, calculated based on frequency, temperature, humidity, and pressure according to EN ISO 354 and ISO 9613-1.\n\n        If a measured reverberation time is provided, its equivalent sound absorption area\n\n        $$A_{eq, measured} = \\frac{55.3 \\cdot V}{T_{measured} \\cdot c}$$\n\n        is used to specify initial values for the extension with additional sound absorption areas. The reverberation time is then calculated as:\n\n        $$T = \\frac{55.3 \\cdot V}{(A_{eq} + A_{eq, measured}) \\cdot c}$$\n        \"\"\"\n        # Calculate the reverberation time based on the optimized Sabine formula according to DIN EN ISO 354\n        if self.air_damp_calc is True:\n            # If air damping is considered, use the Sabine formula corrected by the speed of sound and air damping\n            if self.meas_reverberation_time is not None:\n                # If measured reverberation time is provided, use the calculated equivalent sound absorption area to correct the measured reverberation time\n                Aeq_meas = ((55.3 / self.c) * (self.volume / (self.meas_reverberation_time))) - 4 * self.volume * self.air_damp.calculate_coefficient()\n                self.reverberation_time = (55.3 / self.c) * (self.volume / (self.Aeq + Aeq_meas + 4 * self.volume * self.air_damp.calculate_coefficient()))\n            else:\n                self.reverberation_time = (55.3 / self.c) * (self.volume / (self.Aeq + 4 * self.volume * self.air_damp.calculate_coefficient()))\n\n        if self.air_damp_calc == False:\n            # If air damping is not considered, use the standard Sabine formula corrected by the speed of sound\n            if self.meas_reverberation_time is not None:\n                # If measured reverberation time is provided, use the calculated equivalent sound absorption area to correct the measured reverberation time\n                Aeq_meas = (55.3 * self.volume) / (self.meas_reverberation_time * self.c)\n                self.reverberation_time = (55.3 * self.volume) / ((self.Aeq + Aeq_meas) * self.c)\n            else:\n                self.reverberation_time = (55.3 * self.volume) / (self.Aeq * self.c)\n</code></pre>"},{"location":"api/#src.reverberation_calc.reverberation_time.__init__","title":"<code>__init__(calc_room, surfaces, air_damp_calc=True, meas_reverberation_time=None)</code>","text":"<p>Initializes a reverberation_time object with a specified room, surfaces, and optional parameters for air damping calculation and measured reverberation time.</p> <p>Parameters:</p> Name Type Description Default <code>calc_room</code> <code>room</code> <p>The room for which the reverberation time is calculated, which is an instance of the room class.</p> required <code>surfaces</code> <code>list of surface</code> <p>A list of surfaces in the room, each of which is an instance of the surface class.</p> required <code>air_damp_calc</code> <code>bool</code> <p>A flag indicating whether air damping is considered in the calculation (default is True).</p> <code>True</code> <code>meas_reverberation_time</code> <code>list of int or float</code> <p>A list of measured reverberation times of the room in s (default is None).</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the room is not an instance of the room class.</p> <code>TypeError</code> <p>If the surfaces are not a list or if any surface is not an instance of the surface class.</p> <code>ValueError</code> <p>If the surfaces list is empty.</p> <code>TypeError</code> <p>If the air_damp_calc is not a boolean.</p> <code>TypeError</code> <p>If the measured reverberation time is not a list or if it contains non-numeric values.</p> <code>ValueError</code> <p>If the measured reverberation time list does not contain exactly 8 entries for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.</p> <code>ValueError</code> <p>If the measured reverberation time list is empty or if it contains negative values.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def __init__(self, calc_room, surfaces, air_damp_calc=True, meas_reverberation_time=None):\n    \"\"\"\n    Initializes a reverberation_time object with a specified room, surfaces, and optional parameters for air damping calculation and measured reverberation time.\n\n    Parameters\n    ----------\n    calc_room : room\n        The room for which the reverberation time is calculated, which is an instance of the room class.\n    surfaces : list of surface\n        A list of surfaces in the room, each of which is an instance of the surface class.\n    air_damp_calc : bool, optional\n        A flag indicating whether air damping is considered in the calculation (default is True).\n    meas_reverberation_time : list of int or float, optional\n        A list of measured reverberation times of the room in s (default is None).\n\n    Raises\n    -------\n    ValueError\n        If the room is not an instance of the room class.\n    TypeError\n        If the surfaces are not a list or if any surface is not an instance of the surface class.\n    ValueError\n        If the surfaces list is empty.\n    TypeError\n        If the air_damp_calc is not a boolean.\n    TypeError\n        If the measured reverberation time is not a list or if it contains non-numeric values.\n    ValueError\n        If the measured reverberation time list does not contain exactly 8 entries for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\n    ValueError\n        If the measured reverberation time list is empty or if it contains negative values.\n    \"\"\"\n    if not isinstance(calc_room, room):\n        raise TypeError(\"Room must be an instance of the room class.\")\n    if not isinstance(surfaces, list):\n        raise TypeError(\"Surfaces must be a list.\")\n    if not all(isinstance(calc_surface, surface) for calc_surface in surfaces):\n        raise TypeError(\"All surfaces must be instances of the surface class.\")\n    if len(surfaces) == 0:\n        raise ValueError(\"Surfaces list cannot be empty.\")\n    if not isinstance(air_damp_calc, bool):\n        raise TypeError(\"Air damping calculation flag must be a boolean.\")\n    if meas_reverberation_time is not None:\n        if not isinstance(meas_reverberation_time, list):\n            raise TypeError(\"Measured reverberation time must be a list.\")\n        if not all(isinstance(mrt, (int, float)) for mrt in meas_reverberation_time):\n            raise ValueError(\"Measured reverberation time must be a list of numeric values.\")\n        if len(meas_reverberation_time) != 8:\n            raise ValueError(\"Measured reverberation time must be a list containing 8 entries for the frequency bands 63, 125, 250, 500, 1000, 2000, 4000, and 8000 Hz.\")\n        if len(meas_reverberation_time) == 0:\n            raise ValueError(\"Measured reverberation time list cannot be empty.\")\n        if any(mrt &lt; 0 for mrt in meas_reverberation_time):\n            raise ValueError(\"Measured reverberation time values must be non-negative.\")\n\n\n    self.calc_room = calc_room\n    self.frequency_bands = [63, 125, 250, 500, 1000, 2000, 4000, 8000]\n    self.surfaces = surfaces\n    self.calculate_Aeq()\n    self.c = calc_room.get_c()\n    #self.materials = surfaces.materials\n    self.volume = calc_room.volume\n    self.air_damp_calc = air_damp_calc\n    self.air_damp = air_damp(self.frequency_bands)\n    self.air_damp.set_temperature(calc_room.get_temperature())\n    self.air_damp.set_pressure(calc_room.get_pressure())\n    self.air_damp.set_rel_humidity(calc_room.get_rel_humidity())\n    if meas_reverberation_time is not None:\n        self.meas_reverberation_time = np.array(meas_reverberation_time)\n    else:\n        self.meas_reverberation_time = None\n    self.calculate_reverberation_time()\n</code></pre>"},{"location":"api/#src.reverberation_calc.reverberation_time.calculate_Aeq","title":"<code>calculate_Aeq()</code>","text":"<p>Calculates the equivalent sound absorption area (Aeq) in m\\(^2\\) of the room based on the surfaces and their materials. The equivalent sound absorption area is calculated as the sum of the product of the absorption coefficient and the area of each surface.</p> <p>Returns:</p> Type Description <code>float</code> <p>The equivalent sound absorption area of the room in m\\(^2\\).</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any surface does not have a material with an absorption coefficient defined.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def calculate_Aeq(self):\n    \"\"\"\n    Calculates the equivalent sound absorption area (Aeq) in m$^2$ of the room based on the surfaces and their materials.\n    The equivalent sound absorption area is calculated as the sum of the product of the absorption coefficient and the area of each surface.\n\n    Returns\n    -------\n    float\n        The equivalent sound absorption area of the room in m$^2$.\n\n    Raises\n    -------\n    ValueError\n        If any surface does not have a material with an absorption coefficient defined.\n    \"\"\"\n    if not all(hasattr(surface, 'get_material') and surface.get_material() is not None for surface in self.surfaces):\n        raise ValueError(\"All surfaces must have a material with an absorption coefficient defined.\")\n    coeffs = np.array([surface.get_material().get_absorption_coefficient() for surface in self.surfaces])\n    areas = np.array([surface.get_area() for surface in self.surfaces])\n    Aeq_octave = coeffs * areas[:, np.newaxis]\n    Aeq = np.nansum(Aeq_octave, axis=0)\n    nan_mask = np.isnan(Aeq_octave).any(axis=0)\n    Aeq[nan_mask] = np.nan\n    self.Aeq = Aeq\n    return self.Aeq\n</code></pre>"},{"location":"api/#src.reverberation_calc.reverberation_time.calculate_reverberation_time","title":"<code>calculate_reverberation_time()</code>","text":"<p>Calculates the reverberation time of the room based on the extended Sabine formula, considering air damping if specified.</p> <p>The reverberation time is calculated using the formula:</p> \\[T = \\frac{55.3 \\cdot V}{A_{eq} \\cdot c}\\] <p>where:</p> <ul> <li>\\(T\\) is the reverberation time in s</li> <li>\\(V\\) is the volume of the room in m\u00b3</li> <li>\\(A_{eq}\\) is the equivalent sound absorption area in m\u00b2</li> <li>\\(c\\) is the speed of sound in air in m/s</li> </ul> <p>If air damping is considered, the formula is corrected by the speed of sound and air damping:</p> \\[T = \\frac{55.3}{c} \\cdot \\frac{V}{A_{eq} + 4 \\cdot V \\cdot m}\\] <p>where \\(m\\) is the sound absorption coefficient of air in 1/m, calculated based on frequency, temperature, humidity, and pressure according to EN ISO 354 and ISO 9613-1.</p> <p>If a measured reverberation time is provided, its equivalent sound absorption area</p> \\[A_{eq, measured} = \\frac{55.3 \\cdot V}{T_{measured} \\cdot c}\\] <p>is used to specify initial values for the extension with additional sound absorption areas. The reverberation time is then calculated as:</p> \\[T = \\frac{55.3 \\cdot V}{(A_{eq} + A_{eq, measured}) \\cdot c}\\] Source code in <code>src/reverberation_calc.py</code> <pre><code>def calculate_reverberation_time(self):\n    r\"\"\"\n    Calculates the reverberation time of the room based on the extended Sabine formula, considering air damping if specified.\n\n    The reverberation time is calculated using the formula:\n\n    $$T = \\frac{55.3 \\cdot V}{A_{eq} \\cdot c}$$\n\n    where:\n\n    - $T$ is the reverberation time in s\n    - $V$ is the volume of the room in m\u00b3\n    - $A_{eq}$ is the equivalent sound absorption area in m\u00b2\n    - $c$ is the speed of sound in air in m/s\n\n    If air damping is considered, the formula is corrected by the speed of sound and air damping:\n\n    $$T = \\frac{55.3}{c} \\cdot \\frac{V}{A_{eq} + 4 \\cdot V \\cdot m}$$\n\n    where $m$ is the sound absorption coefficient of air in 1/m, calculated based on frequency, temperature, humidity, and pressure according to EN ISO 354 and ISO 9613-1.\n\n    If a measured reverberation time is provided, its equivalent sound absorption area\n\n    $$A_{eq, measured} = \\frac{55.3 \\cdot V}{T_{measured} \\cdot c}$$\n\n    is used to specify initial values for the extension with additional sound absorption areas. The reverberation time is then calculated as:\n\n    $$T = \\frac{55.3 \\cdot V}{(A_{eq} + A_{eq, measured}) \\cdot c}$$\n    \"\"\"\n    # Calculate the reverberation time based on the optimized Sabine formula according to DIN EN ISO 354\n    if self.air_damp_calc is True:\n        # If air damping is considered, use the Sabine formula corrected by the speed of sound and air damping\n        if self.meas_reverberation_time is not None:\n            # If measured reverberation time is provided, use the calculated equivalent sound absorption area to correct the measured reverberation time\n            Aeq_meas = ((55.3 / self.c) * (self.volume / (self.meas_reverberation_time))) - 4 * self.volume * self.air_damp.calculate_coefficient()\n            self.reverberation_time = (55.3 / self.c) * (self.volume / (self.Aeq + Aeq_meas + 4 * self.volume * self.air_damp.calculate_coefficient()))\n        else:\n            self.reverberation_time = (55.3 / self.c) * (self.volume / (self.Aeq + 4 * self.volume * self.air_damp.calculate_coefficient()))\n\n    if self.air_damp_calc == False:\n        # If air damping is not considered, use the standard Sabine formula corrected by the speed of sound\n        if self.meas_reverberation_time is not None:\n            # If measured reverberation time is provided, use the calculated equivalent sound absorption area to correct the measured reverberation time\n            Aeq_meas = (55.3 * self.volume) / (self.meas_reverberation_time * self.c)\n            self.reverberation_time = (55.3 * self.volume) / ((self.Aeq + Aeq_meas) * self.c)\n        else:\n            self.reverberation_time = (55.3 * self.volume) / (self.Aeq * self.c)\n</code></pre>"},{"location":"api/#src.reverberation_calc.room","title":"<code>room</code>","text":"<p>Defines a \"room\" object with properties such as volume, temperature, pressure, relative humidity, and speed of sound.</p> <p>Parameters:</p> Name Type Description Default <code>volume</code> <code>int or float</code> <p>The volume of the room in m\\(^2\\).</p> required <p>Attributes:</p> Name Type Description <code>volume</code> <code>int or float</code> <p>The volume of the room in m\\(^2\\).</p> <code>temperature</code> <code>int or float</code> <p>The temperature of the room in \u00b0C (default is 20 \u00b0C).</p> <code>pressure</code> <code>int or float</code> <p>The pressure of the room in kPa (default is 101.325 kPa).</p> <code>rel_humidity</code> <code>int or float</code> <p>The relative humidity of the room in % (default is 50 %).</p> <code>height</code> <code>int or float or None</code> <p>The height of the room in m (default is None).</p> <code>c</code> <code>int or float</code> <p>The speed of sound in air in m/s, calculated based on temperature and relative humidity.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>class room:\n    \"\"\"\n    Defines a \"room\" object with properties such as volume, temperature, pressure, relative humidity, and speed of sound.\n\n    Parameters\n    ----------\n    volume : int or float\n        The volume of the room in m$^2$.\n\n    Attributes\n    ----------\n    volume : int or float\n        The volume of the room in m$^2$.\n    temperature : int or float\n        The temperature of the room in \u00b0C (default is 20 \u00b0C).\n    pressure : int or float\n        The pressure of the room in kPa (default is 101.325 kPa).\n    rel_humidity : int or float\n        The relative humidity of the room in % (default is 50 %).\n    height : int or float or None\n        The height of the room in m (default is None).\n    c : int or float\n        The speed of sound in air in m/s, calculated based on temperature and relative humidity.\n    \"\"\"\n\n    def __init__(self, volume):\n        \"\"\"\n        Initializes a room object with a specified volume and default values for temperature, pressure, relative humidity, and speed of sound.\n\n        Parameters\n        ----------\n        volume : int or float \n            The volume of the room in m$^2$.\n\n        Raises\n        ------\n        TypeError\n            If the volume is not a number.\n        ValueError\n            If the volume is not positive.\n        \"\"\"\n        if not isinstance(volume, (int, float)):\n            raise TypeError(\"Volume must be an integer or float.\")\n        if volume &lt;= 0:\n            raise ValueError(\"Volume must be a positive value.\")\n\n        self.volume = volume\n        self.temperature = 20           # Celsius\n        self.pressure = 101.325         # kPa\n        self.rel_humidity = 50          # percentage\n        self.height = None              # meters\n        self.c = self.get_c()           # Speed of sound in air in m/s\n\n    def set_height(self, height):\n        \"\"\"\n        Sets the height of the room in m.\n\n        Parameters\n        ----------\n        height : int or float\n            The height of the room in m.\n\n        Raises\n        -------\n        TypeError\n            If the height is not a number.\n        ValueError\n            If the height is not positive.\n        \"\"\"\n        if not isinstance(height, (int, float)):\n            raise TypeError(\"Height must be an integer or float.\")\n        if height &lt;= 0:\n            raise ValueError(\"Height must be a positive value.\")\n        self.height = height\n\n    def get_height(self):\n        \"\"\"\n        Returns the height of the room in m.\n\n        Returns\n        -------\n        float or None\n            The height of the room in m.\n        \"\"\"\n        return self.height\n\n    def set_volume(self, volume):\n        \"\"\"\n        Sets the volume of the room in m$^2$.\n\n        Parameters\n        ----------\n        volume : int or float\n            The volume of the room in m$^2$.\n\n        Raises\n        -------\n        TypeError\n            If the volume is not an integer.\n        ValueError\n            If the volume is not a positive integer.\n        \"\"\"\n        if not isinstance(volume, (int, float)):\n            raise TypeError(\"Volume must be an integer or float.\")\n        if volume &lt;= 0:\n            raise ValueError(\"Volume must be a positive value.\")\n        self.volume = volume\n\n    def get_volume(self):\n        \"\"\"\n        Returns the volume of the room in m$^2$.\n\n        Returns\n        -------\n        float\n            The volume of the room in m$^2$.\n        \"\"\"\n        return self.volume\n\n    def set_temperature(self, temperature):\n        \"\"\"\n        Sets the temperature of the room in \u00b0C.\n\n        Parameters\n        ----------\n        temperature : int or float\n            The temperature of the room in \u00b0C.\n\n        Raises\n        -------\n        TypeError\n            If the temperature is not an integer or float.\n        ValueError\n            If the temperature is not a positive integer.\n        \"\"\"\n        if not isinstance(temperature, (int, float)):\n            raise TypeError(\"Temperature must be an integer or float.\")\n        if temperature &lt; 0:                                             # Anschauen in ISO!!!\n            raise ValueError(\"Temperature must be .\")\n        self.temperature = temperature\n\n    def get_temperature(self):\n        \"\"\"\n        Returns the temperature of the room in \u00b0C.\n\n        Returns\n        -------\n        float\n            The temperature of the room in \u00b0C.\n        \"\"\"\n        return self.temperature\n\n    def set_pressure(self, pressure):\n        \"\"\"\n        Sets the pressure of the room in kPa.\n\n        Parameters\n        ----------\n        pressure : int or float\n            The pressure of the room in kPa.\n\n        Raises\n        -------\n        TypeError\n            If the pressure is not an integer or float.\n        ValueError\n            If the pressure is not a positive integer.\n        \"\"\"\n        if not isinstance(pressure, (int, float)):\n            raise TypeError(\"Pressure must be an integer or float.\")\n        if pressure &lt;= 0:\n            raise ValueError(\"Pressure must be a positive value.\")\n        self.pressure = pressure\n\n    def get_pressure(self):\n        \"\"\"\n        Returns the pressure of the room in kPa.\n\n        Returns\n        -------\n        float\n            The pressure of the room in kPA.\n        \"\"\"\n        return self.pressure\n\n    def set_rel_humidity(self, rel_humidity):\n        \"\"\"\n        Sets the relative humidity of the room in %.\n\n        Parameters\n        ----------\n        rel_humidity : int or float\n            The relative humidity of the room in %.\n\n        Raises\n        -------\n        TypeError\n            If the relative humidity is not an integer or float.\n        ValueError\n            If the relative humidity is not in the range of 0 % - 100 %.\n        \"\"\"\n        if not isinstance(rel_humidity, (int, float)):\n            raise TypeError(\"Relative humidity must be an integer or float.\")\n        if rel_humidity &lt; 0 or rel_humidity &gt; 100:\n            raise ValueError(\"Relative humidity must be between 0 and 100 %.\")\n        self.rel_humidity = rel_humidity\n\n    def get_rel_humidity(self):\n        \"\"\"\n        Returns the relative humidity of the room in %.\n\n        Returns\n        -------\n        float\n            The relative humidity of the room in %.\n        \"\"\"\n        return self.rel_humidity\n\n    def get_c(self):\n        \"\"\"\n        Calculates and returns the speed of sound in air based on the current temperature and relative humidity according to DIN EN ISO 354.\n\n        Returns\n        -------\n        float\n            The speed of sound in air in m/s.\n        \"\"\"\n        self.c = (331.6 + 0.6 * self.get_temperature())# * (1 + (self.get_rel_humidity() / 100)) ** 0.5 # automatisch ausgef\u00fcllt, kp wieso\n        return self.c\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.__init__","title":"<code>__init__(volume)</code>","text":"<p>Initializes a room object with a specified volume and default values for temperature, pressure, relative humidity, and speed of sound.</p> <p>Parameters:</p> Name Type Description Default <code>volume</code> <code>int or float</code> <p>The volume of the room in m\\(^2\\).</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the volume is not a number.</p> <code>ValueError</code> <p>If the volume is not positive.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def __init__(self, volume):\n    \"\"\"\n    Initializes a room object with a specified volume and default values for temperature, pressure, relative humidity, and speed of sound.\n\n    Parameters\n    ----------\n    volume : int or float \n        The volume of the room in m$^2$.\n\n    Raises\n    ------\n    TypeError\n        If the volume is not a number.\n    ValueError\n        If the volume is not positive.\n    \"\"\"\n    if not isinstance(volume, (int, float)):\n        raise TypeError(\"Volume must be an integer or float.\")\n    if volume &lt;= 0:\n        raise ValueError(\"Volume must be a positive value.\")\n\n    self.volume = volume\n    self.temperature = 20           # Celsius\n    self.pressure = 101.325         # kPa\n    self.rel_humidity = 50          # percentage\n    self.height = None              # meters\n    self.c = self.get_c()           # Speed of sound in air in m/s\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.get_c","title":"<code>get_c()</code>","text":"<p>Calculates and returns the speed of sound in air based on the current temperature and relative humidity according to DIN EN ISO 354.</p> <p>Returns:</p> Type Description <code>float</code> <p>The speed of sound in air in m/s.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_c(self):\n    \"\"\"\n    Calculates and returns the speed of sound in air based on the current temperature and relative humidity according to DIN EN ISO 354.\n\n    Returns\n    -------\n    float\n        The speed of sound in air in m/s.\n    \"\"\"\n    self.c = (331.6 + 0.6 * self.get_temperature())# * (1 + (self.get_rel_humidity() / 100)) ** 0.5 # automatisch ausgef\u00fcllt, kp wieso\n    return self.c\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.get_height","title":"<code>get_height()</code>","text":"<p>Returns the height of the room in m.</p> <p>Returns:</p> Type Description <code>float or None</code> <p>The height of the room in m.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_height(self):\n    \"\"\"\n    Returns the height of the room in m.\n\n    Returns\n    -------\n    float or None\n        The height of the room in m.\n    \"\"\"\n    return self.height\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.get_pressure","title":"<code>get_pressure()</code>","text":"<p>Returns the pressure of the room in kPa.</p> <p>Returns:</p> Type Description <code>float</code> <p>The pressure of the room in kPA.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_pressure(self):\n    \"\"\"\n    Returns the pressure of the room in kPa.\n\n    Returns\n    -------\n    float\n        The pressure of the room in kPA.\n    \"\"\"\n    return self.pressure\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.get_rel_humidity","title":"<code>get_rel_humidity()</code>","text":"<p>Returns the relative humidity of the room in %.</p> <p>Returns:</p> Type Description <code>float</code> <p>The relative humidity of the room in %.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_rel_humidity(self):\n    \"\"\"\n    Returns the relative humidity of the room in %.\n\n    Returns\n    -------\n    float\n        The relative humidity of the room in %.\n    \"\"\"\n    return self.rel_humidity\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.get_temperature","title":"<code>get_temperature()</code>","text":"<p>Returns the temperature of the room in \u00b0C.</p> <p>Returns:</p> Type Description <code>float</code> <p>The temperature of the room in \u00b0C.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_temperature(self):\n    \"\"\"\n    Returns the temperature of the room in \u00b0C.\n\n    Returns\n    -------\n    float\n        The temperature of the room in \u00b0C.\n    \"\"\"\n    return self.temperature\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.get_volume","title":"<code>get_volume()</code>","text":"<p>Returns the volume of the room in m\\(^2\\).</p> <p>Returns:</p> Type Description <code>float</code> <p>The volume of the room in m\\(^2\\).</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_volume(self):\n    \"\"\"\n    Returns the volume of the room in m$^2$.\n\n    Returns\n    -------\n    float\n        The volume of the room in m$^2$.\n    \"\"\"\n    return self.volume\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.set_height","title":"<code>set_height(height)</code>","text":"<p>Sets the height of the room in m.</p> <p>Parameters:</p> Name Type Description Default <code>height</code> <code>int or float</code> <p>The height of the room in m.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the height is not a number.</p> <code>ValueError</code> <p>If the height is not positive.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_height(self, height):\n    \"\"\"\n    Sets the height of the room in m.\n\n    Parameters\n    ----------\n    height : int or float\n        The height of the room in m.\n\n    Raises\n    -------\n    TypeError\n        If the height is not a number.\n    ValueError\n        If the height is not positive.\n    \"\"\"\n    if not isinstance(height, (int, float)):\n        raise TypeError(\"Height must be an integer or float.\")\n    if height &lt;= 0:\n        raise ValueError(\"Height must be a positive value.\")\n    self.height = height\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.set_pressure","title":"<code>set_pressure(pressure)</code>","text":"<p>Sets the pressure of the room in kPa.</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>int or float</code> <p>The pressure of the room in kPa.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the pressure is not an integer or float.</p> <code>ValueError</code> <p>If the pressure is not a positive integer.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_pressure(self, pressure):\n    \"\"\"\n    Sets the pressure of the room in kPa.\n\n    Parameters\n    ----------\n    pressure : int or float\n        The pressure of the room in kPa.\n\n    Raises\n    -------\n    TypeError\n        If the pressure is not an integer or float.\n    ValueError\n        If the pressure is not a positive integer.\n    \"\"\"\n    if not isinstance(pressure, (int, float)):\n        raise TypeError(\"Pressure must be an integer or float.\")\n    if pressure &lt;= 0:\n        raise ValueError(\"Pressure must be a positive value.\")\n    self.pressure = pressure\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.set_rel_humidity","title":"<code>set_rel_humidity(rel_humidity)</code>","text":"<p>Sets the relative humidity of the room in %.</p> <p>Parameters:</p> Name Type Description Default <code>rel_humidity</code> <code>int or float</code> <p>The relative humidity of the room in %.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the relative humidity is not an integer or float.</p> <code>ValueError</code> <p>If the relative humidity is not in the range of 0 % - 100 %.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_rel_humidity(self, rel_humidity):\n    \"\"\"\n    Sets the relative humidity of the room in %.\n\n    Parameters\n    ----------\n    rel_humidity : int or float\n        The relative humidity of the room in %.\n\n    Raises\n    -------\n    TypeError\n        If the relative humidity is not an integer or float.\n    ValueError\n        If the relative humidity is not in the range of 0 % - 100 %.\n    \"\"\"\n    if not isinstance(rel_humidity, (int, float)):\n        raise TypeError(\"Relative humidity must be an integer or float.\")\n    if rel_humidity &lt; 0 or rel_humidity &gt; 100:\n        raise ValueError(\"Relative humidity must be between 0 and 100 %.\")\n    self.rel_humidity = rel_humidity\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.set_temperature","title":"<code>set_temperature(temperature)</code>","text":"<p>Sets the temperature of the room in \u00b0C.</p> <p>Parameters:</p> Name Type Description Default <code>temperature</code> <code>int or float</code> <p>The temperature of the room in \u00b0C.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the temperature is not an integer or float.</p> <code>ValueError</code> <p>If the temperature is not a positive integer.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_temperature(self, temperature):\n    \"\"\"\n    Sets the temperature of the room in \u00b0C.\n\n    Parameters\n    ----------\n    temperature : int or float\n        The temperature of the room in \u00b0C.\n\n    Raises\n    -------\n    TypeError\n        If the temperature is not an integer or float.\n    ValueError\n        If the temperature is not a positive integer.\n    \"\"\"\n    if not isinstance(temperature, (int, float)):\n        raise TypeError(\"Temperature must be an integer or float.\")\n    if temperature &lt; 0:                                             # Anschauen in ISO!!!\n        raise ValueError(\"Temperature must be .\")\n    self.temperature = temperature\n</code></pre>"},{"location":"api/#src.reverberation_calc.room.set_volume","title":"<code>set_volume(volume)</code>","text":"<p>Sets the volume of the room in m\\(^2\\).</p> <p>Parameters:</p> Name Type Description Default <code>volume</code> <code>int or float</code> <p>The volume of the room in m\\(^2\\).</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the volume is not an integer.</p> <code>ValueError</code> <p>If the volume is not a positive integer.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_volume(self, volume):\n    \"\"\"\n    Sets the volume of the room in m$^2$.\n\n    Parameters\n    ----------\n    volume : int or float\n        The volume of the room in m$^2$.\n\n    Raises\n    -------\n    TypeError\n        If the volume is not an integer.\n    ValueError\n        If the volume is not a positive integer.\n    \"\"\"\n    if not isinstance(volume, (int, float)):\n        raise TypeError(\"Volume must be an integer or float.\")\n    if volume &lt;= 0:\n        raise ValueError(\"Volume must be a positive value.\")\n    self.volume = volume\n</code></pre>"},{"location":"api/#src.reverberation_calc.surface","title":"<code>surface</code>","text":"<p>Defines a \"surface\" object with properties such as name, area, and material.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the surface.</p> <code>area</code> <code>int or float</code> <p>The area of the surface in m\\(^2\\).</p> <code>material</code> <code>material</code> <p>The material of the surface, which is an instance of the material class.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>class surface:\n    \"\"\"\n    Defines a \"surface\" object with properties such as name, area, and material.\n\n    Attributes\n    ----------\n    name : str\n        The name of the surface.\n    area : int or float\n        The area of the surface in m$^2$.\n    material : material\n        The material of the surface, which is an instance of the material class.\n    \"\"\"\n\n    def __init__(self, name, area, material):\n        \"\"\"\n        Initializes a surface object with a specified name, area, and material.\n\n        Parameters\n        ----------\n        name : str\n            The name of the surface.\n        area : int or float\n            The area of the surface in m$^2$.\n        material : material \n            The material of the surface, which is an instance of the material class.\n\n        Raises\n        -------\n        TypeError\n            If the name is not a string or if the area is not a numeric value.\n        ValueError\n            If the area is not a positive numeric value.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Name must be a string.\")\n        if not isinstance(area, (int, float)):\n            raise TypeError(\"Area must be an integer or float.\")\n        self.name = name\n        self.area = area\n        self.material = material\n\n    def set_area(self, area):\n        \"\"\"\n        Sets the area of the surface.\n\n        Parameters\n        ----------\n        area : int or float\n            The area of the surface in m$^2$.\n\n        Raises\n        -------\n        TypeError\n            If the area is not a numeric value.\n        ValueError\n            If the area is not a positive numeric value.\n        \"\"\"\n        if not isinstance(area, (int, float)):\n            raise TypeError(\"Area must be a numeric value.\")\n        if area &lt;= 0:\n            raise ValueError(\"Area must be a positive value.\")\n        self.area = area\n\n    def get_area(self):\n        \"\"\"\n        Returns the area of the surface.\n\n        Returns\n        -------\n        float\n            The area of the surface in m$^2$.\n        \"\"\"\n\n        return self.area\n\n    def set_material(self, material):\n        \"\"\"\n        Sets the material of the surface.\n\n        Parameters\n        ----------\n        material : material\n            The material of the surface, which is an instance of the material class.\n\n        Raises\n        -------\n        TypeError\n            If the material is not an instance of the material class.\n        ValueError\n            If the material does not have an absorption coefficient defined.\n        \"\"\"\n        if not isinstance(material, material):\n            raise TypeError(\"Material must be an instance of the material class.\")\n        if not hasattr(material, 'absorption_coefficient'):\n            raise ValueError(\"Material must have an absorption coefficient defined.\")\n        self.material = material\n\n    def get_material(self):\n        \"\"\"\n        Returns the material of the surface.\n\n        Returns\n        -------\n        material\n            The material of the surface, which is an instance of the material class.\n        \"\"\"\n        return self.material\n\n    def set_surface_name(self, name):\n        \"\"\"\n        Sets the name of the surface.\n\n        Parameters\n        ----------\n        name : str\n            The name of the surface.\n\n        Raises\n        -------\n        TypeError\n            If the name is not a string.\n        \"\"\"\n        if not isinstance(name, str):\n            raise TypeError(\"Name must be a string.\")\n        self.name = name\n\n    def get_surface_name(self):\n        \"\"\"\n        Returns the name of the surface if it has been set.\n\n        Returns\n        -------\n        str or None\n            The name of the surface if it has been set.\n        \"\"\"\n        return self.name if hasattr(self, 'name') else None\n</code></pre>"},{"location":"api/#src.reverberation_calc.surface.__init__","title":"<code>__init__(name, area, material)</code>","text":"<p>Initializes a surface object with a specified name, area, and material.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the surface.</p> required <code>area</code> <code>int or float</code> <p>The area of the surface in m\\(^2\\).</p> required <code>material</code> <code>material</code> <p>The material of the surface, which is an instance of the material class.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the name is not a string or if the area is not a numeric value.</p> <code>ValueError</code> <p>If the area is not a positive numeric value.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def __init__(self, name, area, material):\n    \"\"\"\n    Initializes a surface object with a specified name, area, and material.\n\n    Parameters\n    ----------\n    name : str\n        The name of the surface.\n    area : int or float\n        The area of the surface in m$^2$.\n    material : material \n        The material of the surface, which is an instance of the material class.\n\n    Raises\n    -------\n    TypeError\n        If the name is not a string or if the area is not a numeric value.\n    ValueError\n        If the area is not a positive numeric value.\n    \"\"\"\n    if not isinstance(name, str):\n        raise TypeError(\"Name must be a string.\")\n    if not isinstance(area, (int, float)):\n        raise TypeError(\"Area must be an integer or float.\")\n    self.name = name\n    self.area = area\n    self.material = material\n</code></pre>"},{"location":"api/#src.reverberation_calc.surface.get_area","title":"<code>get_area()</code>","text":"<p>Returns the area of the surface.</p> <p>Returns:</p> Type Description <code>float</code> <p>The area of the surface in m\\(^2\\).</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_area(self):\n    \"\"\"\n    Returns the area of the surface.\n\n    Returns\n    -------\n    float\n        The area of the surface in m$^2$.\n    \"\"\"\n\n    return self.area\n</code></pre>"},{"location":"api/#src.reverberation_calc.surface.get_material","title":"<code>get_material()</code>","text":"<p>Returns the material of the surface.</p> <p>Returns:</p> Type Description <code>material</code> <p>The material of the surface, which is an instance of the material class.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_material(self):\n    \"\"\"\n    Returns the material of the surface.\n\n    Returns\n    -------\n    material\n        The material of the surface, which is an instance of the material class.\n    \"\"\"\n    return self.material\n</code></pre>"},{"location":"api/#src.reverberation_calc.surface.get_surface_name","title":"<code>get_surface_name()</code>","text":"<p>Returns the name of the surface if it has been set.</p> <p>Returns:</p> Type Description <code>str or None</code> <p>The name of the surface if it has been set.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def get_surface_name(self):\n    \"\"\"\n    Returns the name of the surface if it has been set.\n\n    Returns\n    -------\n    str or None\n        The name of the surface if it has been set.\n    \"\"\"\n    return self.name if hasattr(self, 'name') else None\n</code></pre>"},{"location":"api/#src.reverberation_calc.surface.set_area","title":"<code>set_area(area)</code>","text":"<p>Sets the area of the surface.</p> <p>Parameters:</p> Name Type Description Default <code>area</code> <code>int or float</code> <p>The area of the surface in m\\(^2\\).</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the area is not a numeric value.</p> <code>ValueError</code> <p>If the area is not a positive numeric value.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_area(self, area):\n    \"\"\"\n    Sets the area of the surface.\n\n    Parameters\n    ----------\n    area : int or float\n        The area of the surface in m$^2$.\n\n    Raises\n    -------\n    TypeError\n        If the area is not a numeric value.\n    ValueError\n        If the area is not a positive numeric value.\n    \"\"\"\n    if not isinstance(area, (int, float)):\n        raise TypeError(\"Area must be a numeric value.\")\n    if area &lt;= 0:\n        raise ValueError(\"Area must be a positive value.\")\n    self.area = area\n</code></pre>"},{"location":"api/#src.reverberation_calc.surface.set_material","title":"<code>set_material(material)</code>","text":"<p>Sets the material of the surface.</p> <p>Parameters:</p> Name Type Description Default <code>material</code> <code>material</code> <p>The material of the surface, which is an instance of the material class.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the material is not an instance of the material class.</p> <code>ValueError</code> <p>If the material does not have an absorption coefficient defined.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_material(self, material):\n    \"\"\"\n    Sets the material of the surface.\n\n    Parameters\n    ----------\n    material : material\n        The material of the surface, which is an instance of the material class.\n\n    Raises\n    -------\n    TypeError\n        If the material is not an instance of the material class.\n    ValueError\n        If the material does not have an absorption coefficient defined.\n    \"\"\"\n    if not isinstance(material, material):\n        raise TypeError(\"Material must be an instance of the material class.\")\n    if not hasattr(material, 'absorption_coefficient'):\n        raise ValueError(\"Material must have an absorption coefficient defined.\")\n    self.material = material\n</code></pre>"},{"location":"api/#src.reverberation_calc.surface.set_surface_name","title":"<code>set_surface_name(name)</code>","text":"<p>Sets the name of the surface.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the surface.</p> required <p>Raises:</p> Type Description <code>TypeError</code> <p>If the name is not a string.</p> Source code in <code>src/reverberation_calc.py</code> <pre><code>def set_surface_name(self, name):\n    \"\"\"\n    Sets the name of the surface.\n\n    Parameters\n    ----------\n    name : str\n        The name of the surface.\n\n    Raises\n    -------\n    TypeError\n        If the name is not a string.\n    \"\"\"\n    if not isinstance(name, str):\n        raise TypeError(\"Name must be a string.\")\n    self.name = name\n</code></pre>"},{"location":"api/#material-database","title":"Material Database","text":""},{"location":"api/#src.material_database","title":"<code>src.material_database</code>","text":""},{"location":"api/#src.material_database.get_database_material","title":"<code>get_database_material(idx)</code>","text":"<p>Retrieves the material name and absorption coefficients from a CSV file based on the given index. The CSV file is expected to be in the current working directory and named \"materials.csv\".</p> <p>Parameters:</p> Name Type Description Default <code>idx</code> <code>int</code> <p>The index of the material in the CSV file.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple containing the material name material_name (str) and an array of absorption coefficients abs_coeff (np.ndarray). The absorption coefficients are expected to be in the columns 1 to 8 of the CSV file.</p> Source code in <code>src/material_database.py</code> <pre><code>def get_database_material(idx):\n    \"\"\"\n    Retrieves the material name and absorption coefficients from a CSV file based on the given index.\n    The CSV file is expected to be in the current working directory and named \"materials.csv\".\n\n    Parameters\n    ----------\n    idx : int\n        The index of the material in the CSV file.\n\n    Returns\n    -------\n    tuple\n        A tuple containing the material name material_name (str) and an array of absorption coefficients abs_coeff (np.ndarray).\n        The absorption coefficients are expected to be in the columns 1 to 8 of the CSV file.\n    \"\"\"\n\n    path = os.getcwd()\n    df = pd.read_csv(os.path.join(path, \"materials.csv\"))\n    material_name = df.iloc[idx, 0]\n    abs_coeff = df.iloc[idx, [1, 2, 3, 4, 5, 6, 7, 8]].to_numpy(dtype=float)\n\n    return material_name,abs_coeff\n</code></pre>"},{"location":"gui/","title":"Graphical User Interface","text":""},{"location":"gui/#pages.home","title":"<code>pages.home</code>","text":"<p>This module defines the layout and callbacks for the home page of the reverberation optimization application. It includes components for inputting room parameters, defining room surfaces, and visualizing the calculated reverberation time.</p>"},{"location":"gui/#pages.home.add_row_to_surface_table","title":"<code>add_row_to_surface_table(n_clicks, rows)</code>","text":"<p>Add a new row to the surface definition table.</p> <p>This callback is triggered when the \"Add Row\" button is clicked. It appends a new, empty row to the <code>area-table</code> DataTable, allowing users to define another room surface.</p> <p>Parameters:</p> Name Type Description Default <code>n_clicks</code> <code>int</code> <p>The number of times the 'add-row-button' has been clicked.</p> required <code>rows</code> <code>list</code> <p>The existing data in the 'area-table'.</p> required <p>Returns:</p> Type Description <code>list</code> <p>The updated data for the 'area-table' with the new row added.</p> Source code in <code>pages/home.py</code> <pre><code>@callback(\n    Output('area-table', 'data', allow_duplicate=True), # allow_duplicate needed if another callback modifies data\n    Input('add-row-button', 'n_clicks'),\n    State('area-table', 'data'),\n    prevent_initial_call=True\n)\ndef add_row_to_surface_table(n_clicks, rows):\n    \"\"\"Add a new row to the surface definition table.\n\n    This callback is triggered when the \"Add Row\" button is clicked. It appends a new,\n    empty row to the `area-table` DataTable, allowing users to define another room surface.\n\n    Parameters\n    ----------\n    n_clicks : int\n        The number of times the 'add-row-button' has been clicked.\n    rows : list\n        The existing data in the 'area-table'.\n\n    Returns\n    -------\n    list\n        The updated data for the 'area-table' with the new row added.\n    \"\"\"\n    if rows is None:\n        rows = []\n    new_row_data = {f\"col-{i+1}\": \"\ud83d\udcbe\" if f\"col-{i+1}\" == \"col-3\" else \"\" for i in range(12)}\n    new_row_data[\"col-delete\"] = \"\ud83d\uddd1\ufe0f\" # Add delete icon to new rows\n    rows.append(new_row_data)\n    return rows\n</code></pre>"},{"location":"gui/#pages.home.handle_table_interactions","title":"<code>handle_table_interactions(active_cell, close_clicks, modal_is_open, table_data)</code>","text":"<p>Handle interactions with the main table.</p> <p>This callback manages two user interactions: 1. Opens a material selection modal when the database icon ('\ud83d\udcbe') is clicked. 2. Deletes a row from the table when the delete icon ('\ud83d\uddd1\ufe0f') is clicked.</p> <p>Parameters:</p> Name Type Description Default <code>active_cell</code> <code>dict</code> <p>The currently active cell in the table.</p> required <code>close_clicks</code> <code>int</code> <p>Number of clicks on the close button.</p> required <code>modal_is_open</code> <code>bool</code> <p>Current state of the modal.</p> required <code>table_data</code> <code>list</code> <p>Current data in the table.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple containing the updated modal state, new modal content, updated table data, and the stored active row index.</p> Source code in <code>pages/home.py</code> <pre><code>@callback(\n    Output(\"details-modal\", \"is_open\"),\n    Output(\"details-modal-body-content\", \"children\"),\n    Output('area-table', 'data', allow_duplicate=True), # Keep allow_duplicate if other callbacks modify data\n    Output('active-row-index-store', 'data'),\n    Input(\"area-table\", \"active_cell\"),\n    Input(\"close-details-modal-button\", \"n_clicks\"),\n    State(\"details-modal\", \"is_open\"),\n    State(\"area-table\", \"data\"), \n    prevent_initial_call=True\n)\ndef handle_table_interactions(active_cell, close_clicks, modal_is_open, table_data):\n    \"\"\"Handle interactions with the main table.\n\n    This callback manages two user interactions:\n    1. Opens a material selection modal when the database icon ('\ud83d\udcbe') is clicked.\n    2. Deletes a row from the table when the delete icon ('\ud83d\uddd1\ufe0f') is clicked.\n\n    Parameters\n    ----------\n    active_cell : dict\n        The currently active cell in the table.\n    close_clicks : int\n        Number of clicks on the close button.\n    modal_is_open : bool\n        Current state of the modal.\n    table_data : list\n        Current data in the table.\n\n    Returns\n    -------\n    tuple\n        A tuple containing the updated modal state, new modal content,\n        updated table data, and the stored active row index.\n    \"\"\"\n\n\n    ctx = dash.callback_context\n    triggered_id = ctx.triggered[0][\"prop_id\"].split(\".\")[0]\n\n    new_modal_state = modal_is_open\n    new_modal_content = dash.no_update\n    new_table_data = dash.no_update \n    stored_row_index = dash.no_update\n\n    if triggered_id == \"close-details-modal-button\":\n        new_modal_state = False\n        return new_modal_state, new_modal_content, new_table_data, stored_row_index\n\n    if active_cell and table_data:\n        row_index = active_cell[\"row\"]\n        col_id = active_cell[\"column_id\"]\n\n        if row_index &lt; len(table_data):\n            # Click action on DB icon in the main table\n            if col_id == \"col-3\":\n                stored_row_index = row_index\n                if not df_materials.empty:\n                    modal_table_component = dash_table.DataTable(\n                        id='material-selection-table',\n                        columns=[{\"name\": i, \"id\": i} for i in df_materials.columns],\n                        data=df_materials.to_dict('records'), # type: ignore\n                        style_table={'overflowY': 'auto', 'height': '400px', 'overflowX': 'auto', 'minWidth': '100%'},\n                        style_cell={\n                            'textAlign': 'left',\n                            'padding': '5px',\n                            'color': 'black',\n                            'border': '1px solid black',\n                            'whiteSpace': 'normal',\n                            'height': 'auto'\n                        },\n                        style_header={\n                            'backgroundColor': 'rgb(230, 230, 230)',\n                            'color': 'black',\n                            'fontWeight': 'bold',\n                            'border': '1px solid black'\n                        },\n                    )\n                    new_modal_content = html.Div(\n                        modal_table_component, \n                        className='material-table-container'\n                    )\n                else:\n                    new_modal_content = html.Div(\"Material database (materials.csv) not found.\")\n\n                new_modal_state = True\n\n            elif col_id == \"col-delete\": # Click on Delete icon in the main table\n                updated_rows = [row for i, row in enumerate(table_data) if i != row_index]\n                new_table_data = updated_rows\n                new_modal_state = False \n                return new_modal_state, new_modal_content, new_table_data, stored_row_index\n\n    return new_modal_state, new_modal_content, new_table_data, stored_row_index\n</code></pre>"},{"location":"gui/#pages.home.update_area_table_with_material","title":"<code>update_area_table_with_material(active_cell, material_data, active_row_index, area_table_data)</code>","text":"<p>Update the area table with data from the selected material of the material database.</p> <p>This callback is triggered when a cell in the material selection modal table is clicked. It takes the absorption coefficient data from the selected material and populates the corresponding row in the main 'area-table'.</p> <p>Parameters:</p> Name Type Description Default <code>active_cell</code> <code>dict</code> <p>The activated cell in the 'material-selection-table'.</p> required <code>material_data</code> <code>list</code> <p>The data from the 'material-selection-table'.</p> required <code>active_row_index</code> <code>int</code> <p>The index of the row in 'area-table' to be updated.</p> required <code>area_table_data</code> <code>list</code> <p>The current data in the 'area-table'.</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>A tuple containing the updated 'area-table' data and a boolean to close the modal.</p> Source code in <code>pages/home.py</code> <pre><code>@callback(\n    Output('area-table', 'data', allow_duplicate=True),\n    Output('details-modal', 'is_open', allow_duplicate=True),\n    Input('material-selection-table', 'active_cell'),\n    State('material-selection-table', 'data'),\n    State('active-row-index-store', 'data'),\n    State('area-table', 'data'),\n    prevent_initial_call=True\n)\ndef update_area_table_with_material(active_cell, material_data, active_row_index, area_table_data):\n    \"\"\"Update the area table with data from the selected material of the material database.\n\n    This callback is triggered when a cell in the material selection modal table is clicked.\n    It takes the absorption coefficient data from the selected material and populates the\n    corresponding row in the main 'area-table'.\n\n    Parameters\n    ----------\n    active_cell : dict\n        The activated cell in the 'material-selection-table'.\n    material_data : list\n        The data from the 'material-selection-table'.\n    active_row_index : int\n        The index of the row in 'area-table' to be updated.\n    area_table_data : list\n        The current data in the 'area-table'.\n\n    Returns\n    -------\n    tuple\n        A tuple containing the updated 'area-table' data and a boolean to close the modal.\n    \"\"\"\n    if not active_cell or active_row_index is None:\n        return dash.no_update, dash.no_update\n\n    selected_material_row_index = active_cell['row']\n    selected_material = material_data[selected_material_row_index]\n\n    # The row from area-table to be updated\n    target_row = area_table_data[active_row_index]\n\n    # Update the values\n    target_row['col-4'] = selected_material['name']\n    target_row['col-5'] = selected_material['63']\n    target_row['col-6'] = selected_material['125']\n    target_row['col-7'] = selected_material['250']\n    target_row['col-8'] = selected_material['500']\n    target_row['col-9'] = selected_material['1000']\n    target_row['col-10'] = selected_material['2000']\n    target_row['col-11'] = selected_material['4000']\n    target_row['col-12'] = selected_material['8000']\n\n    # Close modal\n    return area_table_data, False\n</code></pre>"},{"location":"gui/#pages.home.update_graph_with_calculation","title":"<code>update_graph_with_calculation(table_data, volume, height, temp, humidity, pressure, room_usage, air_damp_activated)</code>","text":"<p>Update the graph based on all user inputs by calling the calculation module.</p> <p>This callback gathers all room parameters and surface definitions from the user interface, passes them to the <code>reverberation_calc</code> module for calculation, and plots the resulting reverberation time on the graph. It also plots target reverberation time ranges based on DIN 18041 if a room usage type is selected.</p> <p>Parameters:</p> Name Type Description Default <code>table_data</code> <code>list[dict]</code> <p>Data from the surface definition table.</p> required <code>volume</code> <code>float</code> <p>Room volume in cubic meters.</p> required <code>height</code> <code>float</code> <p>Room height in meters.</p> required <code>temp</code> <code>float</code> <p>Room temperature in degrees Celsius.</p> required <code>humidity</code> <code>float</code> <p>Relative humidity in percent.</p> required <code>pressure</code> <code>float</code> <p>Air pressure in hPa.</p> required <code>room_usage</code> <code>str</code> <p>Selected room usage type from the dropdown.</p> required <code>air_damp_activated</code> <code>bool</code> <p>State of the air dampening toggle switch.</p> required <p>Returns:</p> Type Description <code>Figure</code> <p>An updated Plotly figure with the calculated reverberation time.</p> Source code in <code>pages/home.py</code> <pre><code>@callback(\n    Output('fig-transformed', 'figure'),\n    [\n        Input('area-table', 'data'),\n        Input(\"input_room_volume\", \"value\"),\n        Input(\"input_room_height\", \"value\"),\n        Input(\"input_room_temperature\", \"value\"),\n        Input(\"input_room_humidity\", \"value\"),\n        Input(\"input_room_pressure\", \"value\"),\n        Input(\"dropdown_room_usage\", \"value\"),\n        Input(\"my-toggle-switch\", \"value\"),\n    ]\n)\ndef update_graph_with_calculation(table_data, volume, height, temp, humidity, pressure, room_usage, air_damp_activated):\n    \"\"\"Update the graph based on all user inputs by calling the calculation module.\n\n    This callback gathers all room parameters and surface definitions from the user interface,\n    passes them to the `reverberation_calc` module for calculation, and plots the resulting\n    reverberation time on the graph. It also plots target reverberation time ranges based on\n    DIN 18041 if a room usage type is selected.\n\n    Parameters\n    ----------\n    table_data : list[dict]\n        Data from the surface definition table.\n    volume : float\n        Room volume in cubic meters.\n    height : float, optional\n        Room height in meters.\n    temp : float\n        Room temperature in degrees Celsius.\n    humidity : float\n        Relative humidity in percent.\n    pressure : float\n        Air pressure in hPa.\n    room_usage : str\n        Selected room usage type from the dropdown.\n    air_damp_activated : bool\n        State of the air dampening toggle switch.\n\n    Returns\n    -------\n    plotly.graph_objects.Figure\n        An updated Plotly figure with the calculated reverberation time.\n    \"\"\"\n    # Helper to convert input to float, handling commas.\n    def to_float(value, default):\n        if value is None or value == '':\n            return default\n        try:\n            return float(str(value).replace(',', '.'))\n        except (ValueError, TypeError):\n            return default\n\n    # Default values for numeric inputs\n    volume = to_float(volume, 30)\n    height = to_float(height, None)\n    temp = to_float(temp, 20)\n    humidity = to_float(humidity, 50)\n    pressure = to_float(pressure, 1013.25) # hPa\n\n    # Standard octave bands for the x-axis\n    frequency_bands = [63, 125, 250, 500, 1000, 2000, 4000, 8000]\n\n    # Create a default empty figure and pre-format the axes\n    fig = go.Figure()\n    fig.update_layout(\n        title_text=\"Please provide room volume and surface data for calculation\",\n        template=\"plotly_dark\",\n        paper_bgcolor=\"rgba(0,0,0,0)\",\n        plot_bgcolor=\"rgba(0,0,0,0)\",\n        font_color=\"#f6f6f6\",\n        xaxis=dict(\n            type='log',\n            tickvals=frequency_bands,\n            ticktext=[str(f) for f in frequency_bands],\n            title_text=\"Frequency in Hz\",\n            range=[np.log10(50), np.log10(10000)]  # Set a fixed range for log axis\n        ),\n        yaxis_title=\"Reverberation Time in s\",\n        yaxis=dict(range=[0, None]),\n    )\n\n    if not volume or not table_data:\n        return fig\n\n    try:\n        # Create Room Object\n        calc_room = reverberation_calc.room(volume)\n        if height:\n            calc_room.set_height(height)\n        calc_room.set_temperature(temp)\n        calc_room.set_rel_humidity(humidity)\n        calc_room.set_pressure(pressure / 10) # Convert hPa to kPa\n\n        # Create Surface Objects\n        surfaces = []\n        for row in table_data:\n            try:\n                # Use a helper to safely convert values to float, defaulting to np.nan for empty strings\n                def safe_float(val):\n                    # The validation callback should have already formatted the numbers,\n                    # but this is a safeguard.\n                    if isinstance(val, str):\n                        val = val.replace(',', '.').strip()\n                    try:\n                        # Return NaN if the value is an empty string or cannot be converted\n                        if val == '' or val is None:\n                            return np.nan\n                        return float(val)\n                    except (ValueError, TypeError):\n                        return np.nan\n\n                area = safe_float(row.get('col-2'))\n                if area is not None and area &gt; 0 and not np.isnan(area):\n                    absorb_coeffs = [\n                        safe_float(row.get('col-5')),\n                        safe_float(row.get('col-6')),\n                        safe_float(row.get('col-7')),\n                        safe_float(row.get('col-8')),\n                        safe_float(row.get('col-9')),\n                        safe_float(row.get('col-10')),\n                        safe_float(row.get('col-11')),\n                        safe_float(row.get('col-12'))\n                    ]\n                    mat_name = row.get('col-4') or \"Unnamed Material\"\n                    surface_name = row.get('col-1') or \"Unnamed Surface\"\n\n                    material = reverberation_calc.material(mat_name, absorb_coeffs)\n                    surface = reverberation_calc.surface(surface_name, area, material)\n                    surfaces.append(surface)\n            except (ValueError, TypeError):\n                # This will now primarily catch issues if the row structure is unexpected\n                continue\n\n        if not surfaces:\n            fig.update_layout(title_text=\"Valid surface data is required for calculation.\")\n            return fig\n\n        # Calculate reverberation time\n        reverb_obj = reverberation_calc.reverberation_time(calc_room, surfaces, air_damp_calc=air_damp_activated)\n        df_reverb = pd.DataFrame({\n            'Frequency': reverb_obj.frequency_bands,\n            'Reverberation Time': reverb_obj.reverberation_time\n        })\n\n        # Get target reverberation time range\n        if room_usage != \"no requirements\":\n            limits = reverberation_calc.DIN_18041_limits(calc_room, room_usage)\n            df_target = pd.DataFrame({\n                'Frequency': reverb_obj.frequency_bands,\n                'T_max': limits.T_upper_limit,\n                'T_min': limits.T_lower_limit\n            })\n        else:\n            df_target = pd.DataFrame()\n\n        if not df_target.empty and (df_target['T_max'] &gt; 0).any() and room_usage.startswith('B'):\n            # Find the first and last indices where T_max is greater than 0\n            non_zero_indices = df_target.index[df_target['T_max'] &gt; 0]\n            first_index = non_zero_indices[0]\n            last_index = non_zero_indices[-1]\n\n            # Get the corresponding frequencies\n            first_freq = df_target.loc[first_index, 'Frequency']\n            last_freq = df_target.loc[last_index, 'Frequency']\n\n            # Create new rows to form a rectangle\n            start_rect_row = pd.DataFrame([{'Frequency': first_freq, 'T_max': 0, 'T_min': 0}])\n            end_rect_row = pd.DataFrame([{'Frequency': last_freq, 'T_max': 0, 'T_min': 0}])\n\n            # Insert the new rows into the DataFrame\n            df_target = pd.concat([\n                df_target.iloc[:first_index],\n                start_rect_row,\n                df_target.iloc[first_index:last_index + 1],\n                end_rect_row,\n                df_target.iloc[last_index + 1:]\n            ]).reset_index(drop=True)\n\n\n        # Plotting\n        fig.add_trace(go.Scatter(\n            x=df_reverb['Frequency'], \n            y=df_reverb['Reverberation Time'],\n            mode='lines+markers',\n            name='Reverberation Time',\n            line=dict(color='#3DED97', width=3)\n        ))\n\n        if not df_target.empty:\n            fig.add_trace(go.Scatter(\n                x=df_target['Frequency'],\n                y=df_target['T_max'],\n                fill=None,\n                mode='lines',\n                line_color='rgba(255,107,107,0.5)',\n                showlegend=False\n            ))\n            fig.add_trace(go.Scatter(\n                x=df_target['Frequency'],\n                y=df_target['T_min'],\n                fill='tonexty', # fill area between trace0 and trace1\n                mode='lines',\n                line_color='rgba(255,107,107,0.5)',\n                name='Tolerance Range',\n            ))\n\n        fig.update_layout(\n            title_text=\"Reverberation Time Calculation with DIN 18041 requirements\",\n            xaxis_title=\"Frequency in Hz\",\n            yaxis_title=\"Reverberation Time in s\",\n            xaxis=dict(\n                type='log',\n                tickvals=frequency_bands,\n                ticktext=[str(f) for f in frequency_bands],\n                range=[np.log10(50), np.log10(10000)]  # Also set range here for consistency\n            ),\n            legend=dict(\n                orientation=\"h\", \n                yanchor=\"bottom\", \n                y=1.02, \n                xanchor=\"right\", \n                x=1,\n                itemclick=False,\n                itemdoubleclick=False\n                )\n        )\n\n    except Exception as e:\n        fig.update_layout(title_text=f\"An error occurred: {e}\")\n\n    return fig\n</code></pre>"},{"location":"gui/#pages.home.validate_and_format_table_data","title":"<code>validate_and_format_table_data(timestamp, data, data_previous)</code>","text":"<p>Validate and format the data in the area-table. Ensures that area and alpha values are numeric and rounded to two decimal places. Reverts invalid inputs to their previous state.</p> Source code in <code>pages/home.py</code> <pre><code>@callback(\n    Output('area-table', 'data', allow_duplicate=True),\n    Input('area-table', 'data_timestamp'),\n    State('area-table', 'data'),\n    State('area-table', 'data_previous'),\n    prevent_initial_call=True\n)\ndef validate_and_format_table_data(timestamp, data, data_previous):\n    \"\"\"\n    Validate and format the data in the area-table.\n    Ensures that area and alpha values are numeric and rounded to two decimal places.\n    Reverts invalid inputs to their previous state.\n    \"\"\"\n    if data is None or data_previous is None:\n        raise dash.exceptions.PreventUpdate\n\n    # If a row was added or deleted, the lengths will be different.\n    # In this case, we don't want to validate, so we allow the update to proceed\n    # without modification from this callback.\n    if len(data) != len(data_previous):\n        return data\n\n    # Find the changed cell\n    changed_row_idx, changed_col_id = -1, ''\n    for i in range(len(data)):\n        # Using .get() to avoid KeyErrors if a column was somehow removed\n        diff_keys = [key for key in data[i] if data[i].get(key) != data_previous[i].get(key)]\n        if diff_keys:\n            changed_row_idx = i\n            changed_col_id = diff_keys[0]\n            break\n\n    if changed_row_idx == -1:\n        raise dash.exceptions.PreventUpdate\n\n    # List of columns to validate\n    editable_numeric_cols = [f'col-{i}' for i in range(2, 13) if i not in [3, 4]]\n\n    if changed_col_id in editable_numeric_cols:\n        value = data[changed_row_idx][changed_col_id]\n        prev_value = data_previous[changed_row_idx][changed_col_id]\n\n        if isinstance(value, str):\n            cleaned_value = value.replace(',', '.').strip()\n            if cleaned_value == '':\n                # Allow user to clear the cell\n                return data\n\n            # Check for valid float format\n            if cleaned_value.count('.') &lt;= 1 and (cleaned_value.replace('.', '', 1).isdigit() or (cleaned_value.startswith('-') and cleaned_value[1:].replace('.', '', 1).isdigit())):\n                try:\n                    num_value = float(cleaned_value)\n                    data[changed_row_idx][changed_col_id] = round(num_value, 2)\n                except (ValueError, TypeError):\n                    # Revert if conversion fails\n                    data[changed_row_idx][changed_col_id] = prev_value\n            else:\n                # Revert if format is invalid\n                data[changed_row_idx][changed_col_id] = prev_value\n        elif isinstance(value, (int, float)):\n            data[changed_row_idx][changed_col_id] = round(value, 2)\n        # If value is None or other type, and it's a change, revert it.\n        elif value != prev_value:\n             data[changed_row_idx][changed_col_id] = prev_value\n\n\n    return data\n</code></pre>"}]}